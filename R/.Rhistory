sapply(seq(1,scaNCells). function(cell2){
# Compute expression state after given time step
# predicted by model
vecCountsHat <- matCounts[,cell1]+matDPT[cell1,cell2]*
(matCounts[,cell1] %*% matOmega[cell1,]) * matOmega
# Evaluate normal loglikelihood of observed
# data under generated model:
vecLL <- dnorm(x=matCounts[,cell2],
mean=vecCountsHat,
sd=scaSD,
log=TRUE)
vecLL[vecLL < scaLogPrecLim] <- scaLogPrecLim
return(sum(vecLL))
})
}))
return(matT)
}
# Perform random walks
# wrapper
scaK <- 30
scaSD <- 0.5
# 1. Compute euclidian distances
matEuclDist <- computeEuclDist(matCounts)
# 2. Find neighbourhoods
# Pre-compute neighbourhoods:
# Memory intensive but saves 50% of the run time
# As eucildian distances for a pair only have to be evaluated once.
matNeighbourhoods <- findNeighbourhoods(
matCounts=matCounts,
matEuclDist=matEuclDist,
scaK=scaK)
# 3. Fit omega model
matOmega <- fitOmegaDataSet(matCounts=matCounts,
matDeltaT=matEuclDist,
matNeighbourhoods=matNeighbourhoods,
scaK=scaK)
# 4. Compute new transition probabilities
matT <- computeTProbs(matCounts=matCounts,
matOmega=matOmega,
scaSD=scaSD)
# 5. Perform random walks
library(destiny)
# Compute euclidian distances in full transcriptome space for all cells
# Used to define neighbourhoods
computeEuclDist <- function(matCounts){
scaNCells <- dim(matCounts)[2]
matEuclDist <- matrix(NA, nrows=scaNCells,
ncol=scaNCells)
for(cell1 in seq(1, scaNCells)){
for(cell2 in seq(cell1, scaNCells)){
scaEuclDist <- sum((matCounts[,cell1]-matCounts[,cell2])^2)
matEuclDist[cell1,cell2] <- scaEuclDist
matEuclDist[cell2,cell1] <- scaEuclDist
}
}
return(matEuclDist)
}
# Define neighbourhoods in full transcriptome space
# Returns matrix of neighbourhood indices with one row per neighbourhood of a cell
findNeighbourhoods <- function(matCounts,
matEuclDist,
scaK){
# Define neighbourhoods for each cell based on euclidian distances
lsNeighbourhoods <- lapply(seq(1,dim(matCounts)[2]), function(cell){
vecindNeighboursSorted <- sort(matEuclDist[cell,], return.index=TRUE)$ix
return(vecindNeighboursSorted[1:K])
})
matNeighbourhoods <- do.call(rbind, lsNeighbourhoods)
return(matNeighbourhoods)
}
# 1. Infer weight vector for each cell
# Iterate over cells
# a) Get dpt differences from target to members of its neighbourhood
# b) Get optimal omega vector
# Const function
# Returns sum of squared errors
evalOmegaPrediction <- function(vecTheta, vecX0, matX1, vecDeltaT){
# Compute error on all cells in neighbourhood
scaSS <- sum(sapply(seq(1, length(vecDeltaT)), function(cell){
matX1[,cell] - (vecX0 + vecDeltaT[cell]* (vecX0 %*% vecTheta)*vecTheta )
}))
return(scaSS)
}
# Fitting wrapper
fitOmegaToCell <- function(vecX0, matX1, vecDeltaT){
vecOmegaGuess <- array(1, length(vecX0))
lsFitOmega <- tryCatch({
optim(par=vecOmegaGuess,
fn=evalOmegaPrediction,
vecX0=vecX0,
matX1=matX1,
vecDeltaT=vecDeltaT,
method="BFGS")["par", "convergence"]
}, error=function(strErrorMsg){
print(strErrorMsg)
stop("Omega fit failed")
})
vecOmega <- lsFitOmega["par"]
return(list(vecOmega=vecOmega))
}
# Fit entire omega model
fitOmegaDataSet <- function(matCounts,
matDeltaT,
matNeighbourhoods,
scaK){
lsFitsOmega <- lapply(seq(1,dim(matCounts)[2]), function(cell){
fitOmegaToCell(vecX0=matCounts[,cell],
matX1[,matNeighbourhoods[cell,]],
vecDeltaT=matDeltaT[cell, matNeighbourhoods[cell,]])
})
matOmega <- do.call(rbind, lsFitsOmega$vecOmega)
return(matOmega)
}
# Get matrix of time differences between all cells: dpt
# Compute new transition probability matrix
computeTProbs <- function(matCounts,
matOmega,
scaSD){
# Approximate time difference as euclidian distance in
# full transcriptome spce
scaNCells <- dim(matCounts)[2]
scaLogPrecLim <- -323*log(10)
# Parallelise over reference cells
matT <- do.call(rbind, lapply(seq(1,scaNCells), function(cell1){
sapply(seq(1,scaNCells). function(cell2){
# Compute expression state after given time step
# predicted by model
vecCountsHat <- matCounts[,cell1]+matDPT[cell1,cell2]*
(matCounts[,cell1] %*% matOmega[cell1,]) * matOmega
# Evaluate normal loglikelihood of observed
# data under generated model:
vecLL <- dnorm(x=matCounts[,cell2],
mean=vecCountsHat,
sd=scaSD,
log=TRUE)
vecLL[vecLL < scaLogPrecLim] <- scaLogPrecLim
return(sum(vecLL))
})
}))
return(matT)
}
# Perform random walks
# wrapper
scaK <- 30
computeTProbs <- function(matCounts,
matOmega,
scaSD){
# Approximate time difference as euclidian distance in
# full transcriptome spce
scaNCells <- dim(matCounts)[2]
scaLogPrecLim <- -323*log(10)
# Parallelise over reference cells
matT <- do.call(rbind, lapply(seq(1,scaNCells), function(cell1){
sapply(seq(1,scaNCells), function(cell2){
# Compute expression state after given time step
# predicted by model
vecCountsHat <- matCounts[,cell1]+matDPT[cell1,cell2]*
(matCounts[,cell1] %*% matOmega[cell1,]) * matOmega
# Evaluate normal loglikelihood of observed
# data under generated model:
vecLL <- dnorm(x=matCounts[,cell2],
mean=vecCountsHat,
sd=scaSD,
log=TRUE)
vecLL[vecLL < scaLogPrecLim] <- scaLogPrecLim
return(sum(vecLL))
})
}))
return(matT)
}
# wrapper
scaK <- 30
scaSD <- 0.5
# 1. Compute euclidian distances
matEuclDist <- computeEuclDist(matCounts)
# 2. Find neighbourhoods
# Pre-compute neighbourhoods:
3 %in% list(c(4,5),c(1,2))
3 %in% list(c(4,5),c(1,3))
list(c(4,5),c(1,3))
any(3 %in% list(c(4,5),c(1,3)))
a=list(2,2,3)
list(unlist(a),3)
rm(list = ls())
# Load data
dfCountsHSMM <- read.table("/Users/davidsebastianfischer/phd_old/data/LineagePulse/manuscriptDataSets/HSMM/rsem/rsem_readCountsTable.txt", header=FALSE, colClasses="numeric")
dfFpkmHSMM <- read.table("/Users/davidsebastianfischer/phd_old/data/LineagePulse/manuscriptDataSets/HSMM/rsem/rsem_fpkmTable.txt", header=FALSE, colClasses="numeric")
dfCellsHSMM <- read.table("/Users/davidsebastianfischer/phd_old/data/LineagePulse/manuscriptDataSets/HSMM/rsem/cell_list.txt", header=FALSE, colClasses="character")
dfGenesHSMM <- read.table("/Users/davidsebastianfischer/phd_old/data/LineagePulse/manuscriptDataSets/HSMM/rsem/gene_list.txt", header=FALSE, colClasses="character")
vecSampleNames <- apply(dfCellsHSMM, 1, function(sample){ unlist(strsplit(sample,split="/"))[2] })
vecSampleNames <- unlist(lapply(vecSampleNames, function(sample){ unlist(strsplit(sample,split="_1"))[1] }))
colnames(dfCountsHSMM) <- vecSampleNames
rownames(dfCountsHSMM) <- dfGenesHSMM[,2]
colnames(dfFpkmHSMM) <- vecSampleNames
rownames(dfFpkmHSMM) <- dfGenesHSMM[,2]
# get single cell samples
fileSampleAnnot <- "/Users/davidsebastianfischer/phd_old/data/LineagePulse/manuscriptDataSets/HSMM/SraRunTable_scRNAMonocle.txt"
dfSampleAnnot <- read.table(fileSampleAnnot, header=TRUE, sep="\t", colClasses="character")
vecSCSamples <- dfSampleAnnot[dfSampleAnnot$library_protocol_s == "Single-cell",]$Run_s
dfCountsHSMM_SC <- dfCountsHSMM[,vecSCSamples]
dfFpkmHSMM_SC <- dfFpkmHSMM[,vecSCSamples]
matCountsHSMM_SC <- as.matrix(dfCountsHSMM_SC)
# Check for NA values
vecboolNAGenes <- apply(matCountsHSMM_SC, 1, function(gene) any(is.na(gene)))
# Entire genes are NA: discard genes with NA observations
matFilteredCountsHSMM_SC <- matCountsHSMM_SC[!vecboolNAGenes,]
dfFilteredFpkmHSMM_SC <- dfFpkmHSMM_SC[!vecboolNAGenes,]
# Create monocle annotation
detach("package:monocle", unload=TRUE)
library(monocle)
library(Biobase)
NCORES <- 2
HSMM_gene_annotationRAW <- data.frame( gene_short_name=dfGenesHSMM[,2], biotype="N/A" )
rownames(HSMM_gene_annotationRAW) <- dfGenesHSMM[,2]
HSMM_sample_sheetRAW <- data.frame( Library=dfSampleAnnot[dfSampleAnnot$Run_s%in% vecSCSamples,]$SRA_Study_s,
Media="GM",
Hours=0,
stringsAsFactors=FALSE)
rownames(HSMM_sample_sheetRAW) <- dfSampleAnnot[dfSampleAnnot$Run_s%in% vecSCSamples,]$Run_s
# Differentiation medium DM from growth medium GM after t=0h
HSMM_sample_sheetRAW[sapply(dfSampleAnnot[dfSampleAnnot$Run_s %in% rownames(HSMM_sample_sheetRAW),]$source_name_s, function(x){unlist(strsplit(x, split="_"))[2]}) == "Cell T0",]$Media <- "DM"
HSMM_sample_sheetRAW[sapply(dfSampleAnnot[dfSampleAnnot$Run_s %in% rownames(HSMM_sample_sheetRAW),]$source_name_s, function(x){unlist(strsplit(x, split="_"))[2]}) == "Cell T24",]$Hours <- 24
HSMM_sample_sheetRAW[sapply(dfSampleAnnot[dfSampleAnnot$Run_s %in% rownames(HSMM_sample_sheetRAW),]$source_name_s, function(x){unlist(strsplit(x, split="_"))[2]}) == "Cell T48",]$Hours <- 48
HSMM_sample_sheetRAW[sapply(dfSampleAnnot[dfSampleAnnot$Run_s %in% rownames(HSMM_sample_sheetRAW),]$source_name_s, function(x){unlist(strsplit(x, split="_"))[2]}) == "Cell T72",]$Hours <- 72
pd <- new("AnnotatedDataFrame", data=HSMM_sample_sheetRAW)
fd <- new("AnnotatedDataFrame", data=HSMM_gene_annotationRAW)
HSMM <- newCellDataSet( cellData=as.matrix(dfFpkmHSMM_SC), phenoData=pd, featureData=fd )
print(head(fData(HSMM)))
HSMM <- detectGenes(HSMM, min_expr=0)
expressed_genes <- row.names(subset(fData(HSMM), num_cells_expressed >= 1))
length(expressed_genes)
HSMM
HSMM@assayData
HSMM@assayData$exprs
head(HSMM@assayData$exprs)
diff_test_res <- differentialGeneTest(HSMM[expressed_genes,], fullModelFormulaStr="expr~Hours",cores=NCORES)
head(diff_test_res)
hist(diff_test_res$pval)
expressed_genes <- row.names(subset(fData(HSMM), num_cells_expressed >= 100))
length(expressed_genes)
expressed_genes <- row.names(subset(fData(HSMM), num_cells_expressed >= 200))
length(expressed_genes)
diff_test_res <- differentialGeneTest(HSMM[expressed_genes,], fullModelFormulaStr="expr~Media",cores=NCORES)
head(diff_test_res)
# Load data
dfCountsHSMM <- read.table("/Users/davidsebastianfischer/phd_old/data/LineagePulse/manuscriptDataSets/HSMM/rsem/rsem_readCountsTable.txt", header=FALSE, colClasses="numeric")
dfFpkmHSMM <- read.table("/Users/davidsebastianfischer/phd_old/data/LineagePulse/manuscriptDataSets/HSMM/rsem/rsem_fpkmTable.txt", header=FALSE, colClasses="numeric")
dfCellsHSMM <- read.table("/Users/davidsebastianfischer/phd_old/data/LineagePulse/manuscriptDataSets/HSMM/rsem/cell_list.txt", header=FALSE, colClasses="character")
dfGenesHSMM <- read.table("/Users/davidsebastianfischer/phd_old/data/LineagePulse/manuscriptDataSets/HSMM/rsem/gene_list.txt", header=FALSE, colClasses="character")
vecSampleNames <- apply(dfCellsHSMM, 1, function(sample){ unlist(strsplit(sample,split="/"))[2] })
vecSampleNames <- unlist(lapply(vecSampleNames, function(sample){ unlist(strsplit(sample,split="_1"))[1] }))
colnames(dfCountsHSMM) <- vecSampleNames
rownames(dfCountsHSMM) <- dfGenesHSMM[,2]
colnames(dfFpkmHSMM) <- vecSampleNames
rownames(dfFpkmHSMM) <- dfGenesHSMM[,2]
# get single cell samples
fileSampleAnnot <- "/Users/davidsebastianfischer/phd_old/data/LineagePulse/manuscriptDataSets/HSMM/SraRunTable_scRNAMonocle.txt"
dfSampleAnnot <- read.table(fileSampleAnnot, header=TRUE, sep="\t", colClasses="character")
vecSCSamples <- dfSampleAnnot[dfSampleAnnot$library_protocol_s == "Single-cell",]$Run_s
dfCountsHSMM_SC <- dfCountsHSMM[,vecSCSamples]
dfFpkmHSMM_SC <- dfFpkmHSMM[,vecSCSamples]
matCountsHSMM_SC <- as.matrix(dfCountsHSMM_SC)
# Check for NA values
vecboolNAGenes <- apply(matCountsHSMM_SC, 1, function(gene) any(is.na(gene)))
# Entire genes are NA: discard genes with NA observations
matFilteredCountsHSMM_SC <- matCountsHSMM_SC[!vecboolNAGenes,]
dfFilteredFpkmHSMM_SC <- dfFpkmHSMM_SC[!vecboolNAGenes,]
head(matFilteredCountsHSMM_SC)
any(duplicated(rownames(matFilteredCountsHSMM_SC)))
rm(list = ls())
# Load data
dfCountsHSMM <- read.table("/Users/davidsebastianfischer/phd_old/data/LineagePulse/manuscriptDataSets/HSMM/rsem/rsem_readCountsTable.txt", header=FALSE, colClasses="numeric")
dfFpkmHSMM <- read.table("/Users/davidsebastianfischer/phd_old/data/LineagePulse/manuscriptDataSets/HSMM/rsem/rsem_fpkmTable.txt", header=FALSE, colClasses="numeric")
dfCellsHSMM <- read.table("/Users/davidsebastianfischer/phd_old/data/LineagePulse/manuscriptDataSets/HSMM/rsem/cell_list.txt", header=FALSE, colClasses="character")
dfGenesHSMM <- read.table("/Users/davidsebastianfischer/phd_old/data/LineagePulse/manuscriptDataSets/HSMM/rsem/gene_list.txt", header=FALSE, colClasses="character")
vecSampleNames <- apply(dfCellsHSMM, 1, function(sample){ unlist(strsplit(sample,split="/"))[2] })
vecSampleNames <- unlist(lapply(vecSampleNames, function(sample){ unlist(strsplit(sample,split="_1"))[1] }))
colnames(dfCountsHSMM) <- vecSampleNames
rownames(dfCountsHSMM) <- dfGenesHSMM[,2]
colnames(dfFpkmHSMM) <- vecSampleNames
rownames(dfFpkmHSMM) <- dfGenesHSMM[,2]
unique(dfGenesHSMM[,3])
sum(dfGenesHSMM[,3]=="protein_coding")
sum(dfGenesHSMM[,3]=="lincRN")
sum(dfGenesHSMM[,3]=="lincRNA")
sum(dfGenesHSMM[,3]=="miRNA")
sum(dfGenesHSMM[,3]=="pseudogene")
sum(dfGenesHSMM[,3]=="TR_C_gene")
sum(dfGenesHSMM[,3]=="rRNA")
sum(dfGenesHSMM[,3]=="rRNA")
sum(apply(dfCountsHSMM,1, function(gene) all(gene==0)))
vecSampleNames <- apply(dfCellsHSMM, 1, function(sample){ unlist(strsplit(sample,split="/"))[2] })
vecSampleNames <- unlist(lapply(vecSampleNames, function(sample){ unlist(strsplit(sample,split="_1"))[1] }))
colnames(dfCountsHSMM) <- vecSampleNames
rownames(dfCountsHSMM) <- dfGenesHSMM[,2]
colnames(dfFpkmHSMM) <- vecSampleNames
rownames(dfFpkmHSMM) <- dfGenesHSMM[,2]
# get single cell samples
fileSampleAnnot <- "/Users/davidsebastianfischer/phd_old/data/LineagePulse/manuscriptDataSets/HSMM/SraRunTable_scRNAMonocle.txt"
dfSampleAnnot <- read.table(fileSampleAnnot, header=TRUE, sep="\t", colClasses="character")
vecSCSamples <- dfSampleAnnot[dfSampleAnnot$library_protocol_s == "Single-cell",]$Run_s
dfCountsHSMM_SC <- dfCountsHSMM[,vecSCSamples]
dfFpkmHSMM_SC <- dfFpkmHSMM[,vecSCSamples]
matCountsHSMM_SC <- as.matrix(dfCountsHSMM_SC)
matCountsHSMM_SC <- as.matrix(dfCountsHSMM_SC)
vecboolNAGenes <- apply(matCountsHSMM_SC, 1, function(gene){
all(is.na(gene) | gene>0)
})
sum(vecboolNAGenes)
dim)matCountsHSMM_SC
dim(matCountsHSMM_SC)
dfCountsHSMM[1,]
dfCountsHSMM[1:5,1:10]
head(dfscRNA)
# 1. Counts
dfscRNA <- read.table("/data/yosef2/users/fischerd/data/scRNAseq_Monocle/LineagePulse/input/HSMM_matCountsNoState3.tab", sep="\t", header=F)
dfGeneIDs <- read.table("/data/yosef2/users/fischerd/data/scRNAseq_Monocle/LineagePulse/input/HSMM_matCountsNoState3_genes.tab",sep="\t",header=F)
dfCellIDs <- read.table("/data/yosef2/users/fischerd/data/scRNAseq_Monocle/LineagePulse/input/HSMM_matCountsNoState3_samples.tab",sep="\t",header=F)
matData <- round(t(apply(dfscRNA,1,as.numeric)))
colnames(matData) <- dfCellIDs$V1
rownames(matData) <- dfGeneIDs$V1
head(dfCountsHSMM)
# Remove variants
a=matrix(3,3,3)
a
rownames(a)=c("a","b","c")
a
lsa<-lapply(seq(1,3), function(i) a[i,])
lsa
duplicated(lsa)
help(strsplit)
x=log(seq(1,1000,by=50))
1/(1-exp(-(2-2x)))
1/(1-exp(-(2-2*x)))
1/(1-exp(-(8-0.8*x)))
1/(1+exp(-(8-0.8*x)))
1/(1+exp(-(2-2*x)))
load("/Users/davidsebastianfischer/phd_old/data/LineagePulse/otherDataSets/Kelly_Oligodendryocytes/output_curve1/LineagePulse_lsMuModelH1.RData")
lsMuParam <- lapply(seq(1, dim(matMuModel)[1]), function(i){
decompressMeansByGene( vecMuModel=lsMuModelH1$matMuModel[i,],
lsMuModelGlobal=lsMuModelH1$lsMuModelGlobal,
vecInterval=NULL )
})
matMuParam <- do.call(rbind, lsMuParam)
lsMuParam <- lapply(seq(1, dim(lsMuModelH1$matMuModel)[1]), function(i){
decompressMeansByGene( vecMuModel=lsMuModelH1$matMuModel[i,],
lsMuModelGlobal=lsMuModelH1$lsMuModelGlobal,
vecInterval=NULL )
})
source("/Users/davidsebastianfischer/gitDevelopment/LineagePulse/R/LineagePulse_main.R")
lsMuParam <- lapply(seq(1, dim(lsMuModelH1$matMuModel)[1]), function(i){
decompressMeansByGene( vecMuModel=lsMuModelH1$matMuModel[i,],
lsMuModelGlobal=lsMuModelH1$lsMuModelGlobal,
vecInterval=NULL )
})
matMuParam <- do.call(rbind, lsMuParam)
dim(matMuParam)
plot(seq(1,426),matMuParam[1,])
plot(seq(1,425),matMuParam[1,])
length(matMuParam[1,])
plot(seq(1,462),matMuParam[1,])
matImpulseTraces <- matMuParam
save(matImpulseTraces, "/Users/davidsebastianfischer/phd_old/data/LineagePulse/otherDataSets/Kelly_Oligodendryocytes/output_curve1/LineagePulse_matImpulseTraces.RData")
save(matImpulseTraces, file="/Users/davidsebastianfischer/phd_old/data/LineagePulse/otherDataSets/Kelly_Oligodendryocytes/output_curve1/LineagePulse_matImpulseTraces.RData")
load("/Users/davidsebastianfischer/phd_old/data/LineagePulse/otherDataSets/Kelly_Oligodendryocytes/output_curve2/LineagePulse_lsMuModelH1.RData")
lsMuParam <- lapply(seq(1, dim(lsMuModelH1$matMuModel)[1]), function(i){
decompressMeansByGene( vecMuModel=lsMuModelH1$matMuModel[i,],
lsMuModelGlobal=lsMuModelH1$lsMuModelGlobal,
vecInterval=NULL )
})
matMuParam <- do.call(rbind, lsMuParam)
matImpulseTraces <- matMuParam
save(matImpulseTraces, file="/Users/davidsebastianfischer/phd_old/data/LineagePulse/otherDataSets/Kelly_Oligodendryocytes/output_curve2/LineagePulse_matImpulseTraces.RData")
head(matImpulseTraces)
head(lsMuModelH1$matMuModel)
source("/Users/davidsebastianfischer/gitDevelopment/LineagePulse/R/LineagePulse_main.R")
load("/Users/davidsebastianfischer/phd_old/data/LineagePulse/otherDataSets/Kelly_Oligodendryocytes/output_curve1/LineagePulse_lsMuModelH1.RData")
lsMuParam <- lapply(seq(1, dim(lsMuModelH1$matMuModel)[1]), function(i){
decompressMeansByGene( vecMuModel=lsMuModelH1$matMuModel[i,],
lsMuModelGlobal=lsMuModelH1$lsMuModelGlobal,
vecInterval=NULL )
})
matImpulseTraces <- do.call(rbind, lsMuParam)
rownames(matImpulseTraces) <- rownames(lsMuModelH1$matMuModel)
save(matImpulseTraces, file="/Users/davidsebastianfischer/phd_old/data/LineagePulse/otherDataSets/Kelly_Oligodendryocytes/output_curve1/LineagePulse_matImpulseTraces.RData")
load("/Users/davidsebastianfischer/phd_old/data/LineagePulse/otherDataSets/Kelly_Oligodendryocytes/output_curve2/LineagePulse_lsMuModelH1.RData")
lsMuParam <- lapply(seq(1, dim(lsMuModelH1$matMuModel)[1]), function(i){
decompressMeansByGene( vecMuModel=lsMuModelH1$matMuModel[i,],
lsMuModelGlobal=lsMuModelH1$lsMuModelGlobal,
vecInterval=NULL )
})
matImpulseTraces <- do.call(rbind, lsMuParam)
rownames(matImpulseTraces) <- rownames(lsMuModelH1$matMuModel)
save(matImpulseTraces, file="/Users/davidsebastianfischer/phd_old/data/LineagePulse/otherDataSets/Kelly_Oligodendryocytes/output_curve2/LineagePulse_matImpulseTraces.RData")
load("/Users/davidsebastianfischer/phd_old/data/LineagePulse/otherDataSets/Kelly_Oligodendryocytes/output_curve3/LineagePulse_lsMuModelH1.RData")load("/Users/davidsebastianfischer/phd_old/data/LineagePulse/otherDataSets/Kelly_Oligodendryocytes/output_curve1/LineagePulse_lsMuModelH1.RData")
lsMuParam <- lapply(seq(1, dim(lsMuModelH1$matMuModel)[1]), function(i){
decompressMeansByGene( vecMuModel=lsMuModelH1$matMuModel[i,],
lsMuModelGlobal=lsMuModelH1$lsMuModelGlobal,
vecInterval=NULL )
})
matImpulseTraces <- do.call(rbind, lsMuParam)
rownames(matImpulseTraces) <- rownames(lsMuModelH1$matMuModel)
save(matImpulseTraces, file="/Users/davidsebastianfischer/phd_old/data/LineagePulse/otherDataSets/Kelly_Oligodendryocytes/output_curve3/LineagePulse_matImpulseTraces.RData")
load("/Users/davidsebastianfischer/phd_old/data/LineagePulse/otherDataSets/Kelly_Oligodendryocytes/output_curve3/LineagePulse_lsMuModelH1.RData")
lsMuParam <- lapply(seq(1, dim(lsMuModelH1$matMuModel)[1]), function(i){
decompressMeansByGene( vecMuModel=lsMuModelH1$matMuModel[i,],
lsMuModelGlobal=lsMuModelH1$lsMuModelGlobal,
vecInterval=NULL )
})
matImpulseTraces <- do.call(rbind, lsMuParam)
rownames(matImpulseTraces) <- rownames(lsMuModelH1$matMuModel)
save(matImpulseTraces, file="/Users/davidsebastianfischer/phd_old/data/LineagePulse/otherDataSets/Kelly_Oligodendryocytes/output_curve3/LineagePulse_matImpulseTraces.RData")
source("/Users/davidsebastianfischer/gitDevelopment/LineagePulse/R/LineagePulse_main.R")
load("/Users/davidsebastianfischer/phd_old/data/LineagePulse/otherDataSets/Kelly_Oligodendryocytes/output_curve1/LineagePulse_lsMuModelH1.RData")
lsMuParam <- lapply(seq(1, dim(lsMuModelH1$matMuModel)[1]), function(i){
decompressMeansByGene( vecMuModel=lsMuModelH1$matMuModel[i,],
lsMuModelGlobal=lsMuModelH1$lsMuModelGlobal,
vecInterval=NULL )
})
matImpulseTraces <- do.call(rbind, lsMuParam)
rownames(matImpulseTraces) <- rownames(lsMuModelH1$matMuModel)
save(matImpulseTraces, file="/Users/davidsebastianfischer/phd_old/data/LineagePulse/otherDataSets/Kelly_Oligodendryocytes/SummaryForCollab/LineagePulseOutput_curve1/LineagePulse_matImpulseTraces.RData")
load("/Users/davidsebastianfischer/phd_old/data/LineagePulse/otherDataSets/Kelly_Oligodendryocytes/output_curve2/LineagePulse_lsMuModelH1.RData")
lsMuParam <- lapply(seq(1, dim(lsMuModelH1$matMuModel)[1]), function(i){
decompressMeansByGene( vecMuModel=lsMuModelH1$matMuModel[i,],
lsMuModelGlobal=lsMuModelH1$lsMuModelGlobal,
vecInterval=NULL )
})
matImpulseTraces <- do.call(rbind, lsMuParam)
rownames(matImpulseTraces) <- rownames(lsMuModelH1$matMuModel)
save(matImpulseTraces, file="/Users/davidsebastianfischer/phd_old/data/LineagePulse/otherDataSets/Kelly_Oligodendryocytes/SummaryForCollab/LineagePulseOutput_curve2/LineagePulse_matImpulseTraces.RData")
load("/Users/davidsebastianfischer/phd_old/data/LineagePulse/otherDataSets/Kelly_Oligodendryocytes/output_curve3/LineagePulse_lsMuModelH1.RData")
lsMuParam <- lapply(seq(1, dim(lsMuModelH1$matMuModel)[1]), function(i){
decompressMeansByGene( vecMuModel=lsMuModelH1$matMuModel[i,],
lsMuModelGlobal=lsMuModelH1$lsMuModelGlobal,
vecInterval=NULL )
})
matImpulseTraces <- do.call(rbind, lsMuParam)
rownames(matImpulseTraces) <- rownames(lsMuModelH1$matMuModel)
save(matImpulseTraces, file="/Users/davidsebastianfischer/phd_old/data/LineagePulse/otherDataSets/Kelly_Oligodendryocytes/SummaryForCollab/LineagePulseOutput_curve3/LineagePulse_matImpulseTraces.RData")
rm(list=ls())
source("/Users/davidsebastianfischer/gitDevelopment/LineagePulse/R/LineagePulse_main.R")
load("/Users/davidsebastianfischer/phd_old/data/LineagePulse/otherDataSets/Kelly_Oligodendryocytes/output_curve1/LineagePulse_lsMuModelH1.RData")
lsMuParam <- lapply(seq(1, dim(lsMuModelH1$matMuModel)[1]), function(i){
decompressMeansByGene( vecMuModel=lsMuModelH1$matMuModel[i,],
lsMuModelGlobal=lsMuModelH1$lsMuModelGlobal,
vecInterval=NULL )
})
matImpulseTracesCurve1 <- do.call(rbind, lsMuParam)
rownames(matImpulseTracesCurve1) <- rownames(lsMuModelH1$matMuModel)
save(matImpulseTracesCurve1, file="/Users/davidsebastianfischer/phd_old/data/LineagePulse/otherDataSets/Kelly_Oligodendryocytes/LineagePulseOutput_curve1/LineagePulse_matImpulseTracesCurve1.RData")
load("/Users/davidsebastianfischer/phd_old/data/LineagePulse/otherDataSets/Kelly_Oligodendryocytes/output_curve2/LineagePulse_lsMuModelH1.RData")
lsMuParam <- lapply(seq(1, dim(lsMuModelH1$matMuModel)[1]), function(i){
decompressMeansByGene( vecMuModel=lsMuModelH1$matMuModel[i,],
lsMuModelGlobal=lsMuModelH1$lsMuModelGlobal,
vecInterval=NULL )
})
matImpulseTracesCurve2 <- do.call(rbind, lsMuParam)
rownames(matImpulseTracesCurve2) <- rownames(lsMuModelH1$matMuModel)
save(matImpulseTracesCurve2, file="/Users/davidsebastianfischer/phd_old/data/LineagePulse/otherDataSets/Kelly_Oligodendryocytes/LineagePulseOutput_curve2/LineagePulse_matImpulseTracesCurve2.RData")
load("/Users/davidsebastianfischer/phd_old/data/LineagePulse/otherDataSets/Kelly_Oligodendryocytes/output_curve3/LineagePulse_lsMuModelH1.RData")
lsMuParam <- lapply(seq(1, dim(lsMuModelH1$matMuModel)[1]), function(i){
decompressMeansByGene( vecMuModel=lsMuModelH1$matMuModel[i,],
lsMuModelGlobal=lsMuModelH1$lsMuModelGlobal,
vecInterval=NULL )
})
matImpulseTracesCurve3 <- do.call(rbind, lsMuParam)
rownames(matImpulseTracesCurve3) <- rownames(lsMuModelH1$matMuModel)
save(matImpulseTracesCurve3, file="/Users/davidsebastianfischer/phd_old/data/LineagePulse/otherDataSets/Kelly_Oligodendryocytes/LineagePulseOutput_curve3/LineagePulse_matImpulseTracesCurve3.RData")
source("/Users/davidsebastianfischer/gitDevelopment/LineagePulse/R/LineagePulse_main.R")
load("/Users/davidsebastianfischer/phd_old/data/LineagePulse/otherDataSets/Kelly_Oligodendryocytes/output_curve1/LineagePulse_lsMuModelH1.RData")
lsMuParam <- lapply(seq(1, dim(lsMuModelH1$matMuModel)[1]), function(i){
decompressMeansByGene( vecMuModel=lsMuModelH1$matMuModel[i,],
lsMuModelGlobal=lsMuModelH1$lsMuModelGlobal,
vecInterval=NULL )
})
matImpulseTracesCurve1 <- do.call(rbind, lsMuParam)
rownames(matImpulseTracesCurve1) <- rownames(lsMuModelH1$matMuModel)
save(matImpulseTracesCurve1, file="/Users/davidsebastianfischer/phd_old/data/LineagePulse/otherDataSets/Kelly_Oligodendryocytes/SummaryForCollab/LineagePulse_matImpulseTracesCurve1.RData")
load("/Users/davidsebastianfischer/phd_old/data/LineagePulse/otherDataSets/Kelly_Oligodendryocytes/output_curve2/LineagePulse_lsMuModelH1.RData")
lsMuParam <- lapply(seq(1, dim(lsMuModelH1$matMuModel)[1]), function(i){
decompressMeansByGene( vecMuModel=lsMuModelH1$matMuModel[i,],
lsMuModelGlobal=lsMuModelH1$lsMuModelGlobal,
vecInterval=NULL )
})
matImpulseTracesCurve2 <- do.call(rbind, lsMuParam)
rownames(matImpulseTracesCurve2) <- rownames(lsMuModelH1$matMuModel)
save(matImpulseTracesCurve2, file="/Users/davidsebastianfischer/phd_old/data/LineagePulse/otherDataSets/Kelly_Oligodendryocytes/SummaryForCollab/LineagePulse_matImpulseTracesCurve2.RData")
load("/Users/davidsebastianfischer/phd_old/data/LineagePulse/otherDataSets/Kelly_Oligodendryocytes/output_curve3/LineagePulse_lsMuModelH1.RData")
lsMuParam <- lapply(seq(1, dim(lsMuModelH1$matMuModel)[1]), function(i){
decompressMeansByGene( vecMuModel=lsMuModelH1$matMuModel[i,],
lsMuModelGlobal=lsMuModelH1$lsMuModelGlobal,
vecInterval=NULL )
})
matImpulseTracesCurve3 <- do.call(rbind, lsMuParam)
rownames(matImpulseTracesCurve3) <- rownames(lsMuModelH1$matMuModel)
save(matImpulseTracesCurve3, file="/Users/davidsebastianfischer/phd_old/data/LineagePulse/otherDataSets/Kelly_Oligodendryocytes/SummaryForCollab/LineagePulse_matImpulseTracesCurve3.RData")
dfCSF <- read.table("/Users/davidsebastianfischer/phd/data/LineagePulse/Shalek_CSF/MERCK001_1.matrix.log.txt")
dfCSF <- read.table("/Users/davidsebastianfischer/phd_old/data/LineagePulse/Shalek_CSF/MERCK001_1.matrix.log.txt")
dfCSF <- read.table("/Users/davidsebastianfischer/phd_old/data/LineagePulse/otherDataSets/Shalek_CSF/MERCK001_1.matrix.log.txt")
head(dfCSF)
dfCSF[1,1:5]
exp(dfCSF[1,1:5])
dim(dfCSF)
dfCSF <- read.table("/Users/davidsebastianfischer/phd_old/data/LineagePulse/otherDataSets/Shalek_CSF/reads.MERCK_R1.fastq_bq10_star_corrected.umi.dge.txt")
dfCSF2 <- dfCSF[rownames(dfCSFRev),colnames(dfCSFRev)]
dfCSFRev <- read.table("/Users/davidsebastianfischer/phd_old/data/LineagePulse/otherDataSets/Shalek_CSF/MERCK001_1.matrix.log.txt")
dfCSF2 <- dfCSF[rownames(dfCSFRev),colnames(dfCSFRev)]
head(dfCSF)
head(dfCSF2)
head(dfCSFRev)
head(dfCSFRev)
