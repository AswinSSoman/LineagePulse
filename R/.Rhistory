xlim(-3,0)
print(gplotECF_Rand)
### Put figure together
lsgplotsFigSimulationSupportingSI <- list(
gplotPvalCorr_BatchCorrCase,
gplotPvalCorr_BatchCorrCaseCtrl,
gplotECF_Rand
)
# Add margins
marginObject <- theme(plot.margin = unit(c(1,1,1,2), "cm")) #t,r,b,l
lsgplotsFigSimulationSupportingSI <- lapply(lsgplotsFigSimulationSupportingSI, "+", marginObject)
# Add text and legend formats
scaRefTextSize <- 14
scaResScale <- 2
scaLabelsScale <- 2
themeObjectStandard <- theme(axis.text=element_text(size=scaRefTextSize*scaResScale),
axis.title=element_text(size=scaRefTextSize*scaResScale,face="bold"),
legend.text=element_text(size=scaRefTextSize*scaResScale),
legend.title=element_text(size=scaRefTextSize*scaResScale),
legend.key.size = unit(scaResScale, 'lines'))
themeObjectNoLegend <- theme(axis.text=element_text(size=scaRefTextSize*scaResScale),
axis.title=element_text(size=scaRefTextSize*scaResScale,face="bold"),
legend.position="none")
lsthemeObjects <- list(themeObjectStandard,
themeObjectStandard,
themeObjectStandard)
lsgplotsFigSimulationSupportingSI <- lapply(seq(1, length(lsgplotsFigSimulationSupportingSI)), function(g){
lsgplotsFigSimulationSupportingSI[[g]] + lsthemeObjects[[g]]
})
graphics.off()
tiff("/home/david/gdrive/phd/data/ImpulsDE2/Manuscript_DataSets/figures/figSimulationSupportingSI.tiff",
width=480*2*2, height=480*2*2)
plot_grid(plotlist=lsgplotsFigSimulationSupportingSI,
align="h",
nrow=2, ncol=2,
rel_widths=c(1,1),
rel_heights=c(1,1),
labels="AUTO",
label_size=scaRefTextSize*scaResScale*scaLabelsScale)
dev.off()
graphics.off()
# b) Supporting PR plots
# AUC PR Number TP case
load("/home/david/gdrive/phd/data/ImpulsDE2/Manuscript_DataSets/simulations/ManyTP/matPvalImpulseDE2.RData")
load("/home/david/gdrive/phd/data/ImpulsDE2/Manuscript_DataSets/simulations/ManyTP/matPvalDESeq2.RData")
load("/home/david/gdrive/phd/data/ImpulsDE2/Manuscript_DataSets/simulations/ManyTP/matPvalEdge.RData")
load("/home/david/gdrive/phd/data/ImpulsDE2/Manuscript_DataSets/simulations/ManyTP/matboolDEGene.RData")
vecNTP <- sapply(colnames(matPvalImpulseDE2), function(tp){
as.numeric(unlist(strsplit(tp, split="n"))[2])
})
vecAUCPRImpulseDE2 <- array(NA, length(vecNTP))
names(vecAUCPRImpulseDE2) <- colnames(matPvalImpulseDE2)
vecAUCPRDESeq2 <- array(NA, length(vecNTP))
names(vecAUCPRDESeq2) <- colnames(matPvalImpulseDE2)
vecAUCPREdge <- array(NA, length(vecNTP))
names(vecAUCPREdge) <- colnames(matPvalImpulseDE2)
for(n in colnames(matPvalImpulseDE2)){
dfPRImpulseDE2 <- calcPR( vecPval=matPvalImpulseDE2[,n],
vecboolDE=matboolDEGene[,n] )
vecAUCPRImpulseDE2[n] <- calcAUCPR( dfPR=dfPRImpulseDE2 )
dfPRDESeq2 <- calcPR( vecPval=matPvalDESeq2[,n],
vecboolDE=matboolDEGene[,n] )
vecAUCPRDESeq2[n] <- calcAUCPR( dfPR=dfPRDESeq2 )
dfPREdge <- calcPR( vecPval=matPvalEdge[,n],
vecboolDE=matboolDEGene[,n] )
vecAUCPREdge[n] <- calcAUCPR( dfPR=dfPREdge )
}
dfAUCsPR_NTP <- data.frame( n=c(vecNTP, vecNTP, vecNTP),
auc=c(vecAUCPRImpulseDE2, vecAUCPRDESeq2, vecAUCPREdge),
Method=c(rep("ImpulseDE2", length(vecAUCPRImpulseDE2)),
rep("DESeq2", length(vecAUCPRDESeq2)),
rep("Edge", length(vecAUCPREdge)) ))
# Colour-blind palette
cbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
gplotAUCPR_NTP <- ggplot(dfAUCsPR_NTP) +
geom_line(aes(x=n, y=auc, colour=Method), alpha=0.7, size=2) + scale_colour_manual(values=cbPalette) +
geom_point(aes(x=n, y=auc), shape=3, size=2) +
xlab("Number of time points") +
ylab("AUC (PR)")
print(gplotAUCPR_NTP)
# AUC PR Number TP case-ctrl
load("/home/david/gdrive/phd/data/ImpulsDE2/Manuscript_DataSets/simulations/ManyTPCaseCtrl/matPvalImpulseDE2.RData")
load("/home/david/gdrive/phd/data/ImpulsDE2/Manuscript_DataSets/simulations/ManyTPCaseCtrl/matPvalDESeq2.RData")
load("/home/david/gdrive/phd/data/ImpulsDE2/Manuscript_DataSets/simulations/ManyTPCaseCtrl/matPvalEdge.RData")
load("/home/david/gdrive/phd/data/ImpulsDE2/Manuscript_DataSets/simulations/ManyTPCaseCtrl/matboolDEGene.RData")
vecNTP <- sapply(colnames(matPvalImpulseDE2), function(tp){
as.numeric(unlist(strsplit(tp, split="n"))[2])
})
vecAUCPRImpulseDE2 <- array(NA, length(vecNTP))
names(vecAUCPRImpulseDE2) <- colnames(matPvalImpulseDE2)
vecAUCPRDESeq2 <- array(NA, length(vecNTP))
names(vecAUCPRDESeq2) <- colnames(matPvalImpulseDE2)
vecAUCPREdge <- array(NA, length(vecNTP))
names(vecAUCPREdge) <- colnames(matPvalImpulseDE2)
for(n in colnames(matPvalImpulseDE2)){
dfPRImpulseDE2 <- calcPR( vecPval=matPvalImpulseDE2[,n],
vecboolDE=matboolDEGene[,n] )
vecAUCPRImpulseDE2[n] <- calcAUCPR( dfPR=dfPRImpulseDE2 )
dfPRDESeq2 <- calcPR( vecPval=matPvalDESeq2[,n],
vecboolDE=matboolDEGene[,n] )
vecAUCPRDESeq2[n] <- calcAUCPR( dfPR=dfPRDESeq2 )
dfPREdge <- calcPR( vecPval=matPvalEdge[,n],
vecboolDE=matboolDEGene[,n] )
vecAUCPREdge[n] <- calcAUCPR( dfPR=dfPREdge )
}
dfAUCsPR_NTPCaseCtrl <- data.frame( n=c(vecNTP, vecNTP, vecNTP),
auc=c(vecAUCPRImpulseDE2, vecAUCPRDESeq2, vecAUCPREdge),
Method=c(rep("ImpulseDE2", length(vecAUCPRImpulseDE2)),
rep("DESeq2", length(vecAUCPRDESeq2)),
rep("Edge", length(vecAUCPREdge)) ))
# Colour-blind palette
cbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
gplotAUCPR_NTPCaseCtrl <- ggplot(dfAUCsPR_NTPCaseCtrl) +
geom_line(aes(x=n, y=auc, colour=Method), alpha=0.7, size=2) + scale_colour_manual(values=cbPalette) +
geom_point(aes(x=n, y=auc), shape=3, size=2) +
xlab("Number of time points") +
ylab("AUC (PR)")
print(gplotAUCPR_NTPCaseCtrl)
# AUC PR NonSync
load("/home/david/gdrive/phd/data/ImpulsDE2/Manuscript_DataSets/simulations/NonSync/dfPvalSyncSampling.RData")
dfPRImpulseDE2Sync <- calcPR( vecPval=dfPvalSyncSampling$pvalSyncImpulseDE2,
vecboolDE=dfPvalSyncSampling$boolDESync )
scaAUCPRImpulseDE2Sync <- calcAUCPR( dfPR=dfPRImpulseDE2Sync )
dfPRImpulseDE2NonSync <- calcPR( vecPval=dfPvalSyncSampling$pvalNonSyncImpulseDE2,
vecboolDE=dfPvalSyncSampling$boolDENonSync )
scaAUCPRImpulseDE2NonSync <- calcAUCPR( dfPR=dfPRImpulseDE2NonSync )
dfPREdgeSync <- calcPR( vecPval=dfPvalSyncSampling$pvalSyncEdge,
vecboolDE=dfPvalSyncSampling$boolDESync )
scaAUCPREdgeSync <- calcAUCPR( dfPR=dfPREdgeSync )
dfPREdgeNonSync <- calcPR( vecPval=dfPvalSyncSampling$pvalNonSyncEdge,
vecboolDE=dfPvalSyncSampling$boolDENonSync )
scaAUCPREdgeNonSync <- calcAUCPR( dfPR=dfPREdgeNonSync )
dfPRs_NonSync <- data.frame(
precision=c(dfPRImpulseDE2Sync$precision,
dfPRImpulseDE2NonSync$precision,
dfPREdgeSync$precision,
dfPREdgeNonSync$precision),
recall=c(dfPRImpulseDE2Sync$recall,
dfPRImpulseDE2NonSync$recall,
dfPREdgeSync$recall,
dfPREdgeNonSync$recall),
Sampling=c(rep("ImpulseDE2 (Sync)", dim(dfPRImpulseDE2Sync)[1]),
rep("ImpulseDE2 (NonSync)", dim(dfPRImpulseDE2NonSync)[1]),
rep("Edge (Sync)", dim(dfPREdgeSync)[1]),
rep("Edge (NonSync)", dim(dfPREdgeNonSync)[1]) )
)
# Colour-blind palette
cbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
gplotPRs_NonSync <- ggplot(dfPRs_NonSync) +
geom_line(aes(x=recall, y=precision, colour=Sampling), size=2) + scale_colour_manual(values=cbPalette) +
xlab("Recall") +
ylab("Precision") +
scale_colour_discrete(name="Method (sampling)",
breaks=c("ImpulseDE2 (Sync)",
"ImpulseDE2 (NonSync)",
"Edge (Sync)",
"Edge (NonSync)" ),
labels=c(paste0("ImpulseDE2\n(Sync)\n[AUC=",round(scaAUCPRImpulseDE2Sync,3),"]"),
paste0("ImpulseDE2\n(NonSync)\n[AUC=",round(scaAUCPRImpulseDE2NonSync,3),"]"),
paste0("Edge\n(Sync)\n[AUC=",round(scaAUCPREdgeSync,3),"]"),
paste0("Edge\n(NonSync)\n[AUC=",round(scaAUCPREdgeNonSync,3),"]") ))
print(gplotPRs_NonSync)
# AUC PR BatchCorrCase
load("/home/david/gdrive/phd/data/ImpulsDE2/Manuscript_DataSets/simulations/BatchCorrCase/matPvalImpulseDE2.RData")
load("/home/david/gdrive/phd/data/ImpulsDE2/Manuscript_DataSets/simulations/BatchCorrCase/matPvalDESeq2.RData")
load("/home/david/gdrive/phd/data/ImpulsDE2/Manuscript_DataSets/simulations/BatchCorrCase/matboolDEGene.RData")
load("/home/david/gdrive/phd/data/ImpulsDE2/Manuscript_DataSets/simulations/BatchCorrCase/vecSDBatchEffectToSimulate.RData")
vecAUCPRImpulseDE2 <- array(NA, dim(matPvalImpulseDE2)[2])
names(vecAUCPRImpulseDE2) <- colnames(matPvalImpulseDE2)
vecAUCPRDESeq2 <- array(NA, dim(matPvalImpulseDE2)[2])
names(vecAUCPRDESeq2) <- colnames(matPvalImpulseDE2)
for(n in colnames(matPvalImpulseDE2)){
dfPRImpulseDE2 <- calcPR( vecPval=matPvalImpulseDE2[,n],
vecboolDE=matboolDEGene[,n] )
vecAUCPRImpulseDE2[n] <- calcAUCPR( dfPR=dfPRImpulseDE2 )
dfPRDESeq2 <- calcPR( vecPval=matPvalDESeq2[,n],
vecboolDE=matboolDEGene[,n] )
vecAUCPRDESeq2[n] <- calcAUCPR( dfPR=dfPRDESeq2 )
}
dfAUCsPR_BatchCorrCase <- data.frame( n=c(vecSDBatchEffectToSimulate, vecSDBatchEffectToSimulate),
auc=c(vecAUCPRImpulseDE2, vecAUCPRDESeq2),
Method=c(rep("ImpulseDE2", length(vecAUCPRImpulseDE2)),
rep("DESeq2", length(vecAUCPRDESeq2))) )
# Colour-blind palette
cbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
gplotAUCPR_BatchCorrCase <- ggplot(dfAUCsPR_BatchCorrCase) +
geom_line(aes(x=n, y=auc, colour=Method), size=2) + scale_colour_manual(values=cbPalette) +
geom_point(aes(x=n, y=auc), shape=3, size=2) +
ylim(0.4,0.9) +
xlab("standard deviation") +
ylab("AUC (PR)")
print(gplotAUCPR_BatchCorrCase)
# AUC PR BatchCorrCaseCtrl
load("/home/david/gdrive/phd/data/ImpulsDE2/Manuscript_DataSets/simulations/BatchCorrCaseCtrl/matPvalImpulseDE2.RData")
load("/home/david/gdrive/phd/data/ImpulsDE2/Manuscript_DataSets/simulations/BatchCorrCaseCtrl/matPvalDESeq2.RData")
load("/home/david/gdrive/phd/data/ImpulsDE2/Manuscript_DataSets/simulations/BatchCorrCaseCtrl/matboolDEGene.RData")
load("/home/david/gdrive/phd/data/ImpulsDE2/Manuscript_DataSets/simulations/BatchCorrCaseCtrl/vecSDBatchEffectToSimulate.RData")
vecAUCPRImpulseDE2 <- array(NA, dim(matPvalImpulseDE2)[2])
names(vecAUCPRImpulseDE2) <- colnames(matPvalImpulseDE2)
vecAUCPRDESeq2 <- array(NA, dim(matPvalImpulseDE2)[2])
names(vecAUCPRDESeq2) <- colnames(matPvalImpulseDE2)
for(n in colnames(matPvalImpulseDE2)){
dfPRImpulseDE2 <- calcPR( vecPval=matPvalImpulseDE2[,n],
vecboolDE=matboolDEGene[,n] )
vecAUCPRImpulseDE2[n] <- calcAUCPR( dfPR=dfPRImpulseDE2 )
dfPRDESeq2 <- calcPR( vecPval=matPvalDESeq2[,n],
vecboolDE=matboolDEGene[,n] )
vecAUCPRDESeq2[n] <- calcAUCPR( dfPR=dfPRDESeq2 )
}
dfAUCsPR_BatchCorrCaseCtrl <- data.frame( n=c(vecSDBatchEffectToSimulate, vecSDBatchEffectToSimulate),
auc=c(vecAUCPRImpulseDE2, vecAUCPRDESeq2),
Method=c(rep("ImpulseDE2", length(vecAUCPRImpulseDE2)),
rep("DESeq2", length(vecAUCPRDESeq2))) )
# Colour-blind palette
cbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
gplotAUCPR_BatchCorrCaseCtrl <- ggplot(dfAUCsPR_BatchCorrCaseCtrl) +
geom_line(aes(x=n, y=auc, colour=Method), size=2) + scale_colour_manual(values=cbPalette) +
geom_point(aes(x=n, y=auc), shape=3, size=2) +
ylim(0.4,0.9) +
xlab("standard deviation") +
ylab("AUC (PR)")
print(gplotAUCPR_BatchCorrCaseCtrl)
### Put figure together
lsgplotsFigSimulationPrecRecallSI <- list(
gplotAUCPR_NTP,
gplotAUCPR_NTPCaseCtrl,
gplotAUCPR_BatchCorrCase,
gplotAUCPR_BatchCorrCaseCtrl,
gplotPRs_NonSync
)
# Add margins
marginObject <- theme(plot.margin = unit(c(1,1,1,2), "cm")) #t,r,b,l
lsgplotsFigSimulationPrecRecallSI <- lapply(lsgplotsFigSimulationPrecRecallSI, "+", marginObject)
# Add text and legend formats
scaRefTextSize <- 14
scaResScale <- 2
scaLabelsScale <- 2
themeObjectStandard <- theme(axis.text=element_text(size=scaRefTextSize*scaResScale),
axis.title=element_text(size=scaRefTextSize*scaResScale,face="bold"),
legend.text=element_text(size=scaRefTextSize*scaResScale),
legend.title=element_text(size=scaRefTextSize*scaResScale),
legend.key.size = unit(scaResScale, 'lines'))
themeObjectNoLegend <- theme(axis.text=element_text(size=scaRefTextSize*scaResScale),
axis.title=element_text(size=scaRefTextSize*scaResScale,face="bold"),
legend.position="none")
themeObjectNonSync <- theme(axis.text=element_text(size=scaRefTextSize*scaResScale),
axis.title=element_text(size=scaRefTextSize*scaResScale,face="bold"),
legend.text=element_text(size=scaRefTextSize*scaResScale),
legend.title=element_text(size=scaRefTextSize*scaResScale),
legend.key.size = unit(4*scaResScale, 'lines'))
lsthemeObjects <- list(themeObjectNoLegend,
themeObjectStandard,
themeObjectNoLegend,
themeObjectStandard,
themeObjectNonSync)
lsgplotsFigSimulationPrecRecallSI <- lapply(seq(1, length(lsgplotsFigSimulationPrecRecallSI)), function(g){
lsgplotsFigSimulationPrecRecallSI[[g]] + lsthemeObjects[[g]]
})
graphics.off()
tiff("/home/david/gdrive/phd/data/ImpulsDE2/Manuscript_DataSets/figures/figSimulationPrecRecallSI.tiff",
width=480*2*2, height=480*2*2.5)
plot_grid(plotlist=lsgplotsFigSimulationPrecRecallSI,
align="h",
nrow=3, ncol=2,
rel_widths=c(1,1),
rel_heights=c(1,0.5,1),
labels="AUTO",
label_size=scaRefTextSize*scaResScale*scaLabelsScale)
dev.off()
graphics.off()
load("/home/david/gdrive/phd/datasets/2016_PancreasAtlas/matCountsPancreas.RData")
source("~/gitDevelopment/LineagePulse/R/main_MixtureModel.R")
objectLP_pancreas <- runMixtureModel(matCounts=matCountsPancreas[1:100,1:100],
scaNMixtures=3,
vecFixedAssignments=NULL,
matPiConstPredictors=NULL,
vecNormConstExternal=NULL,
strDispModel="constant",
scaMaxEstimationCyclesEMlike=20,
scaMaxEstimationCyclesDropModel=20,
scaNProc=4,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
source("~/gitDevelopment/LineagePulse/R/main_MixtureModel.R")
objectLP_pancreas <- runMixtureModel(matCounts=matCountsPancreas[1:100,1:100],
scaNMixtures=3,
vecFixedAssignments=NULL,
matPiConstPredictors=NULL,
vecNormConstExternal=NULL,
strDispModel="constant",
scaMaxEstimationCyclesEMlike=20,
scaMaxEstimationCyclesDropModel=20,
scaNProc=4,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
source("~/gitDevelopment/LineagePulse/R/main_MixtureModel.R")
objectLP_pancreas <- runMixtureModel(matCounts=matCountsPancreas[1:100,1:100],
scaNMixtures=3,
vecFixedAssignments=NULL,
matPiConstPredictors=NULL,
vecNormConstExternal=NULL,
strDispModel="constant",
scaMaxEstimationCyclesEMlike=20,
scaMaxEstimationCyclesDropModel=20,
scaNProc=4,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
source("~/gitDevelopment/LineagePulse/R/main_MixtureModel.R")
objectLP_pancreas <- runMixtureModel(matCounts=matCountsPancreas[1:100,1:100],
scaNMixtures=3,
vecFixedAssignments=NULL,
matPiConstPredictors=NULL,
vecNormConstExternal=NULL,
strDispModel="constant",
scaMaxEstimationCyclesEMlike=20,
scaMaxEstimationCyclesDropModel=20,
scaNProc=4,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
source("~/gitDevelopment/LineagePulse/R/main_MixtureModel.R")
objectLP_pancreas <- runMixtureModel(matCounts=matCountsPancreas[1:100,1:100],
scaNMixtures=3,
vecFixedAssignments=NULL,
matPiConstPredictors=NULL,
vecNormConstExternal=NULL,
strDispModel="constant",
scaMaxEstimationCyclesEMlike=20,
scaMaxEstimationCyclesDropModel=20,
scaNProc=4,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
source("~/gitDevelopment/LineagePulse/R/main_MixtureModel.R")
objectLP_pancreas <- runMixtureModel(matCounts=matCountsPancreas[1:100,1:100],
scaNMixtures=3,
vecFixedAssignments=NULL,
matPiConstPredictors=NULL,
vecNormConstExternal=NULL,
strDispModel="constant",
scaMaxEstimationCyclesEMlike=20,
scaMaxEstimationCyclesDropModel=20,
scaNProc=4,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
source("~/gitDevelopment/LineagePulse/R/main_MixtureModel.R")
objectLP_pancreas <- runMixtureModel(matCounts=matCountsPancreas[1:100,1:100],
scaNMixtures=3,
vecFixedAssignments=NULL,
matPiConstPredictors=NULL,
vecNormConstExternal=NULL,
strDispModel="constant",
scaMaxEstimationCyclesEMlike=20,
scaMaxEstimationCyclesDropModel=20,
scaNProc=4,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
source("~/gitDevelopment/LineagePulse/R/main_MixtureModel.R")
objectLP_pancreas <- runMixtureModel(matCounts=matCountsPancreas[1:100,1:100],
scaNMixtures=3,
vecFixedAssignments=NULL,
matPiConstPredictors=NULL,
vecNormConstExternal=NULL,
strDispModel="constant",
scaMaxEstimationCyclesEMlike=20,
scaMaxEstimationCyclesDropModel=20,
scaNProc=4,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
source("~/gitDevelopment/LineagePulse/R/main_MixtureModel.R")
objectLP_pancreas <- runMixtureModel(matCounts=matCountsPancreas[1:100,1:100],
scaNMixtures=3,
vecFixedAssignments=NULL,
matPiConstPredictors=NULL,
vecNormConstExternal=NULL,
strDispModel="constant",
scaMaxEstimationCyclesEMlike=20,
scaMaxEstimationCyclesDropModel=20,
scaNProc=4,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
source("~/gitDevelopment/LineagePulse/R/main_MixtureModel.R")
objectLP_pancreas <- runMixtureModel(matCounts=matCountsPancreas[1:100,1:100],
scaNMixtures=3,
vecFixedAssignments=NULL,
matPiConstPredictors=NULL,
vecNormConstExternal=NULL,
strDispModel="constant",
scaMaxEstimationCyclesEMlike=20,
scaMaxEstimationCyclesDropModel=20,
scaNProc=4,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
source("~/gitDevelopment/LineagePulse/R/main_MixtureModel.R")
objectLP_pancreas <- runMixtureModel(matCounts=matCountsPancreas[1:100,1:100],
scaNMixtures=3,
vecFixedAssignments=NULL,
matPiConstPredictors=NULL,
vecNormConstExternal=NULL,
strDispModel="constant",
scaMaxEstimationCyclesEMlike=20,
scaMaxEstimationCyclesDropModel=20,
scaNProc=4,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
source("~/gitDevelopment/LineagePulse/R/main_MixtureModel.R")
objectLP_pancreas <- runMixtureModel(matCounts=matCountsPancreas[1:100,1:100],
scaNMixtures=3,
vecFixedAssignments=NULL,
matPiConstPredictors=NULL,
vecNormConstExternal=NULL,
strDispModel="constant",
scaMaxEstimationCyclesEMlike=20,
scaMaxEstimationCyclesDropModel=20,
scaNProc=1,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
source("~/gitDevelopment/LineagePulse/R/main_MixtureModel.R")
objectLP_pancreas <- runMixtureModel(matCounts=matCountsPancreas[1:100,1:100],
scaNMixtures=3,
vecFixedAssignments=NULL,
matPiConstPredictors=NULL,
vecNormConstExternal=NULL,
strDispModel="constant",
scaMaxEstimationCyclesEMlike=20,
scaMaxEstimationCyclesDropModel=20,
scaNProc=1,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
source("~/gitDevelopment/LineagePulse/R/main_MixtureModel.R")
objectLP_pancreas <- runMixtureModel(matCounts=matCountsPancreas[1:100,1:100],
scaNMixtures=3,
vecFixedAssignments=NULL,
matPiConstPredictors=NULL,
vecNormConstExternal=NULL,
strDispModel="constant",
scaMaxEstimationCyclesEMlike=20,
scaMaxEstimationCyclesDropModel=20,
scaNProc=1,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
source("~/gitDevelopment/LineagePulse/R/main_MixtureModel.R")
objectLP_pancreas <- runMixtureModel(matCounts=matCountsPancreas[1:100,1:100],
scaNMixtures=3,
vecFixedAssignments=NULL,
matPiConstPredictors=NULL,
vecNormConstExternal=NULL,
strDispModel="constant",
scaMaxEstimationCyclesEMlike=20,
scaMaxEstimationCyclesDropModel=20,
scaNProc=1,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
source("~/gitDevelopment/LineagePulse/R/main_MixtureModel.R")
objectLP_pancreas <- runMixtureModel(matCounts=matCountsPancreas[1:100,1:100],
scaNMixtures=3,
vecFixedAssignments=NULL,
matPiConstPredictors=NULL,
vecNormConstExternal=NULL,
strDispModel="constant",
scaMaxEstimationCyclesEMlike=20,
scaMaxEstimationCyclesDropModel=20,
scaNProc=1,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
source("~/gitDevelopment/LineagePulse/R/main_MixtureModel.R")
objectLP_pancreas <- runMixtureModel(matCounts=matCountsPancreas[1:100,1:100],
scaNMixtures=3,
vecFixedAssignments=NULL,
matPiConstPredictors=NULL,
vecNormConstExternal=NULL,
strDispModel="constant",
scaMaxEstimationCyclesEMlike=20,
scaMaxEstimationCyclesDropModel=20,
scaNProc=1,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
source("~/gitDevelopment/LineagePulse/R/main_MixtureModel.R")
objectLP_pancreas <- runMixtureModel(matCounts=matCountsPancreas[1:100,1:100],
scaNMixtures=3,
vecFixedAssignments=NULL,
matPiConstPredictors=NULL,
vecNormConstExternal=NULL,
strDispModel="constant",
scaMaxEstimationCyclesEMlike=20,
scaMaxEstimationCyclesDropModel=20,
scaNProc=1,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
source("~/gitDevelopment/LineagePulse/R/main_MixtureModel.R")
objectLP_pancreas <- runMixtureModel(matCounts=matCountsPancreas[1:100,1:100],
scaNMixtures=3,
vecFixedAssignments=NULL,
matPiConstPredictors=NULL,
vecNormConstExternal=NULL,
strDispModel="constant",
scaMaxEstimationCyclesEMlike=20,
scaMaxEstimationCyclesDropModel=20,
scaNProc=1,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
source("~/gitDevelopment/LineagePulse/R/main_MixtureModel.R")
objectLP_pancreas <- runMixtureModel(matCounts=matCountsPancreas[1:100,1:100],
scaNMixtures=3,
vecFixedAssignments=NULL,
matPiConstPredictors=NULL,
vecNormConstExternal=NULL,
strDispModel="constant",
scaMaxEstimationCyclesEMlike=20,
scaMaxEstimationCyclesDropModel=20,
scaNProc=1,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
matDropModel
