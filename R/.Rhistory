dfROCImpulseDE2Sync <- calcROC( vecPval=dfPvalSyncSampling$pvalSyncImpulseDE2,
vecboolDE=dfPvalSyncSampling$boolDESync )
scaAUCROCImpulseDE2Sync <- calcAUCROC( dfROC=dfROCImpulseDE2Sync )
dfROCImpulseDE2NonSync <- calcROC( vecPval=dfPvalSyncSampling$pvalNonSyncImpulseDE2,
vecboolDE=dfPvalSyncSampling$boolDENonSync )
scaAUCROCImpulseDE2NonSync <- calcAUCROC( dfROC=dfROCImpulseDE2NonSync )
dfROCEdgeSync <- calcROC( vecPval=dfPvalSyncSampling$pvalSyncEdge,
vecboolDE=dfPvalSyncSampling$boolDESync )
scaAUCROCEdgeSync <- calcAUCROC( dfROC=dfROCEdgeSync )
dfROCEdgeNonSync <- calcROC( vecPval=dfPvalSyncSampling$pvalNonSyncEdge,
vecboolDE=dfPvalSyncSampling$boolDENonSync )
scaAUCROCEdgeNonSync <- calcAUCROC( dfROC=dfROCEdgeNonSync )
dfROCs_NonSync <- data.frame(
fpr=c(dfROCImpulseDE2Sync$fpr,
dfROCImpulseDE2NonSync$fpr,
dfROCEdgeSync$fpr,
dfROCEdgeNonSync$fpr),
tpr=c(dfROCImpulseDE2Sync$tpr,
dfROCImpulseDE2NonSync$tpr,
dfROCEdgeSync$tpr,
dfROCEdgeNonSync$tpr),
Sampling=c(rep("ImpulseDE2 (Sync)", dim(dfROCImpulseDE2Sync)[1]),
rep("ImpulseDE2 (NonSync)", dim(dfROCImpulseDE2NonSync)[1]),
rep("Edge (Sync)", dim(dfROCEdgeSync)[1]),
rep("Edge (NonSync)", dim(dfROCEdgeNonSync)[1]) )
)
# Colour-blind palette
cbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
gplotROCs_NonSync <- ggplot(dfROCs_NonSync) +
geom_line(aes(x=fpr, y=tpr, colour=Sampling), size=2) + scale_colour_manual(values=cbPalette) +
labs(title="Synchronous sampling") +
xlab("False positive rate") +
ylab("True positive rate") +
scale_colour_discrete(name="Method\n(sampling)\n",
breaks=c("ImpulseDE2 (Sync)",
"ImpulseDE2 (NonSync)",
"Edge (Sync)",
"Edge (NonSync)" ),
labels=c(paste0("ImpulseDE2\n(Sync)\n[AUC=",round(scaAUCROCImpulseDE2Sync,3),"]"),
paste0("ImpulseDE2\n(NonSync)\n[AUC=",round(scaAUCROCImpulseDE2NonSync,3),"]"),
paste0("Edge\n(Sync)\n[AUC=",round(scaAUCROCEdgeSync,3),"]"),
paste0("Edge\n(NonSync)\n[AUC=",round(scaAUCROCEdgeNonSync,3),"]") ))
print(gplotROCs_NonSync)
# Batch correction case AUC
load("/home/david/gdrive/phd/data/ImpulsDE2/Manuscript_DataSets/simulations/BatchCorrCase/matPvalImpulseDE2.RData")
load("/home/david/gdrive/phd/data/ImpulsDE2/Manuscript_DataSets/simulations/BatchCorrCase/matPvalDESeq2.RData")
load("/home/david/gdrive/phd/data/ImpulsDE2/Manuscript_DataSets/simulations/BatchCorrCase/matboolDEGene.RData")
load("/home/david/gdrive/phd/data/ImpulsDE2/Manuscript_DataSets/simulations/BatchCorrCase/vecSDBatchEffectToSimulate.RData")
vecAUCROCImpulseDE2 <- array(NA, dim(matPvalImpulseDE2)[2])
names(vecAUCROCImpulseDE2) <- colnames(matPvalImpulseDE2)
vecAUCROCDESeq2 <- array(NA, dim(matPvalImpulseDE2)[2])
names(vecAUCROCDESeq2) <- colnames(matPvalImpulseDE2)
for(n in colnames(matPvalImpulseDE2)){
dfROCImpulseDE2 <- calcROC( vecPval=matPvalImpulseDE2[,n],
vecboolDE=matboolDEGene[,n] )
vecAUCROCImpulseDE2[n] <- calcAUCROC( dfROC=dfROCImpulseDE2 )
dfROCDESeq2 <- calcROC( vecPval=matPvalDESeq2[,n],
vecboolDE=matboolDEGene[,n] )
vecAUCROCDESeq2[n] <- calcAUCROC( dfROC=dfROCDESeq2 )
}
dfAUCsROC_BatchCorrCase <- data.frame( sd=c(vecSDBatchEffectToSimulate, vecSDBatchEffectToSimulate),
auc=c(vecAUCROCImpulseDE2, vecAUCROCDESeq2),
Method=c(rep("ImpulseDE2", length(vecAUCROCImpulseDE2)),
rep("DESeq2", length(vecAUCROCDESeq2))) )
# Colour-blind palette
cbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
gplotAUCROC_BatchCorrCase <- ggplot(dfAUCsROC_BatchCorrCase) +
geom_line(aes(x=sd, y=auc, colour=Method), size=2) + scale_colour_manual(values=cbPalette) +
geom_point(aes(x=sd, y=auc), shape=3, size=2) +
ylim(0.4,0.9) +
labs(title="Case-only: batch correction") +
xlab("standard deviation") +
ylab("AUC (ROC)")
#coord_fixed(ratio=(max(dfAUCsROC_BatchCorrCase$sd)-min(dfAUCsROC_BatchCorrCase$sd))/(0.9-0.4)/2 ) # Fix to 1:2 ratio
print(gplotAUCROC_BatchCorrCase)
# Batch correction case-control AUC
load("/home/david/gdrive/phd/data/ImpulsDE2/Manuscript_DataSets/simulations/BatchCorrCaseCtrl/matPvalImpulseDE2.RData")
load("/home/david/gdrive/phd/data/ImpulsDE2/Manuscript_DataSets/simulations/BatchCorrCaseCtrl/matPvalDESeq2.RData")
load("/home/david/gdrive/phd/data/ImpulsDE2/Manuscript_DataSets/simulations/BatchCorrCaseCtrl/matboolDEGene.RData")
load("/home/david/gdrive/phd/data/ImpulsDE2/Manuscript_DataSets/simulations/BatchCorrCaseCtrl/vecSDBatchEffectToSimulate.RData")
vecAUCROCImpulseDE2 <- array(NA, dim(matPvalImpulseDE2)[2])
names(vecAUCROCImpulseDE2) <- colnames(matPvalImpulseDE2)
vecAUCROCDESeq2 <- array(NA, dim(matPvalImpulseDE2)[2])
names(vecAUCROCDESeq2) <- colnames(matPvalImpulseDE2)
for(n in colnames(matPvalImpulseDE2)){
dfROCImpulseDE2 <- calcROC( vecPval=matPvalImpulseDE2[,n],
vecboolDE=matboolDEGene[,n] )
vecAUCROCImpulseDE2[n] <- calcAUCROC( dfROC=dfROCImpulseDE2 )
dfROCDESeq2 <- calcROC( vecPval=matPvalDESeq2[,n],
vecboolDE=matboolDEGene[,n] )
vecAUCROCDESeq2[n] <- calcAUCROC( dfROC=dfROCDESeq2 )
}
dfAUCsROC_BatchCorrCaseCtrl <- data.frame( sd=c(vecSDBatchEffectToSimulate, vecSDBatchEffectToSimulate),
auc=c(vecAUCROCImpulseDE2, vecAUCROCDESeq2),
Method=c(rep("ImpulseDE2", length(vecAUCROCImpulseDE2)),
rep("DESeq2", length(vecAUCROCDESeq2))) )
# Colour-blind palette
cbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
gplotAUCROC_BatchCorrCaseCtrl <- ggplot(dfAUCsROC_BatchCorrCaseCtrl) +
geom_line(aes(x=sd, y=auc, colour=Method), size=2) + scale_colour_manual(values=cbPalette) +
geom_point(aes(x=sd, y=auc), shape=3, size=2) +
ylim(0.4,0.9) +
labs(title="Case-control: batch correction") +
xlab("standard deviation") +
ylab("AUC (ROC)")
#coord_fixed(ratio=(max(dfAUCsROC_BatchCorrCaseCtrl$sd)-min(dfAUCsROC_BatchCorrCaseCtrl$sd))/(0.9-0.4)/2 ) # Fix to 1:2 ratio
print(gplotAUCROC_BatchCorrCaseCtrl)
### Put figure together
lsgplotsFigSimulationMain <- list(
gplotAUCROC_NTP,
gplotAUCROC_NTPCaseCtrl,
gplotFDRvsSD_Rand,
gplotROCs_NonSync,
gplotAUCROC_BatchCorrCase,
gplotAUCROC_BatchCorrCaseCtrl
)
# Add margins
marginObject <- theme(plot.margin = unit(c(1,1,2,2), "cm")) #t,r,b,l
lsgplotsFigSimulationMain <- lapply(lsgplotsFigSimulationMain, "+", marginObject)
# Add text and legend formats
scaRefTextSize <- 14
scaResScale <- 2
scaLabelsScale <- 2
themeObjectStandard <- theme(axis.text=element_text(size=scaRefTextSize*scaResScale),
axis.title=element_text(size=scaRefTextSize*scaResScale,face="bold"),
plot.title=element_text(size=rel(scaResScale),face="bold"),
legend.text=element_text(size=scaRefTextSize*scaResScale),
legend.title=element_text(size=scaRefTextSize*scaResScale),
legend.key.size = unit(scaResScale*2, 'lines'))
themeObjectNonSync <- theme(axis.text=element_text(size=scaRefTextSize*scaResScale),
axis.title=element_text(size=scaRefTextSize*scaResScale,face="bold"),
plot.title=element_text(size=rel(scaResScale),face="bold"),
legend.text=element_text(size=scaRefTextSize*scaResScale),
legend.title=element_text(size=scaRefTextSize*scaResScale),
legend.key.size = unit(scaResScale*4, 'lines'))
themeObjectNoLegend <- theme(axis.text=element_text(size=scaRefTextSize*scaResScale),
axis.title=element_text(size=scaRefTextSize*scaResScale,face="bold"),
plot.title=element_text(size=rel(scaResScale),face="bold"),
legend.position="none")
lsthemeObjects <- list(themeObjectNoLegend,
themeObjectNoLegend,
themeObjectStandard,
themeObjectNonSync,
themeObjectNoLegend,
themeObjectStandard)
lsgplotsFigSimulationMain <- lapply(seq(1, length(lsgplotsFigSimulationMain)), function(g){
lsgplotsFigSimulationMain[[g]] + lsthemeObjects[[g]]
})
graphics.off()
tiff("/home/david/gdrive/phd/data/ImpulsDE2/Manuscript_DataSets/figures/figSimulationMain.tiff",
width=480*2*3, height=480*2*1.5)
plot_grid(plotlist=lsgplotsFigSimulationMain,
align="h",
nrow=2, ncol=3,
rel_widths=c(1,1,1),
rel_heights=c(1,1),
labels="AUTO",
label_size=scaRefTextSize*scaResScale*scaLabelsScale)
dev.off()
graphics.off()
# (II) SI figures
# a) Additional plots omitted in main
# P-value correlation BatchCorrCase for medium noise
load("/home/david/gdrive/phd/data/ImpulsDE2/Manuscript_DataSets/simulations/BatchCorrCase/matPvalImpulseDE2.RData")
load("/home/david/gdrive/phd/data/ImpulsDE2/Manuscript_DataSets/simulations/BatchCorrCase/matPvalDESeq2.RData")
load("/home/david/gdrive/phd/data/ImpulsDE2/Manuscript_DataSets/simulations/BatchCorrCase/matboolDEGene.RData")
load("/home/david/gdrive/phd/data/ImpulsDE2/Manuscript_DataSets/simulations/BatchCorrCase/vecSDBatchEffectToSimulate.RData")
n <- colnames(matPvalImpulseDE2)[round( (dim(matPvalImpulseDE2)[2])/2 )]
dfPvalCorr_BatchCorrCase <- data.frame(
ImpulseDE2=log(matPvalImpulseDE2[,n])/log(10),
DESeq2=log(matPvalDESeq2[,n])/log(10)
)
dfPvalCorr_BatchCorrCase[is.na(dfPvalCorr_BatchCorrCase)] <- 1 # Set NAs (ie failed or non-performed DE analysis) to non-discovery (=1)
# Colour-blind palette
cbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
gplotPvalCorr_BatchCorrCase <- ggplot() +
geom_point(data= dfPvalCorr_BatchCorrCase,
aes(x=ImpulseDE2, y=DESeq2),
alpha=0.5,
show.legend=TRUE) + scale_colour_manual(values=cbPalette) +
xlab("log10 p-value ImpulseDE2") +
ylab("log10 p-value DESeq2")
print(gplotPvalCorr_BatchCorrCase)
# P-value correlation BatchCorrCaseCtrl for medium noise
load("/home/david/gdrive/phd/data/ImpulsDE2/Manuscript_DataSets/simulations/BatchCorrCaseCtrl/matPvalImpulseDE2.RData")
load("/home/david/gdrive/phd/data/ImpulsDE2/Manuscript_DataSets/simulations/BatchCorrCaseCtrl/matPvalDESeq2.RData")
load("/home/david/gdrive/phd/data/ImpulsDE2/Manuscript_DataSets/simulations/BatchCorrCaseCtrl/matboolDEGene.RData")
load("/home/david/gdrive/phd/data/ImpulsDE2/Manuscript_DataSets/simulations/BatchCorrCaseCtrl/vecSDBatchEffectToSimulate.RData")
n <- colnames(matPvalImpulseDE2)[round( (dim(matPvalImpulseDE2)[2])/2 )]
dfPvalCorr_BatchCorrCaseCtrl <- data.frame(
ImpulseDE2=log(matPvalImpulseDE2[,n])/log(10),
DESeq2=log(matPvalDESeq2[,n])/log(10)
)
dfPvalCorr_BatchCorrCaseCtrl[is.na(dfPvalCorr_BatchCorrCaseCtrl)] <- 1 # Set NAs (ie failed or non-performed DE analysis) to non-discovery (=1)
# Colour-blind palette
cbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
gplotPvalCorr_BatchCorrCaseCtrl <- ggplot() +
geom_point(data= dfPvalCorr_BatchCorrCaseCtrl,
aes(x=ImpulseDE2, y=DESeq2),
alpha=0.5,
show.legend=TRUE) + scale_colour_manual(values=cbPalette) +
xlab("log10 p-value ImpulseDE2") +
ylab("log10 p-value DESeq2")
print(gplotPvalCorr_BatchCorrCaseCtrl)
# Sample FDR as function of p treshold plot at medium noise
load("/home/david/gdrive/phd/data/ImpulsDE2/Manuscript_DataSets/simulations/RandomFluct/matPvalImpulseDE2.RData")
load("/home/david/gdrive/phd/data/ImpulsDE2/Manuscript_DataSets/simulations/RandomFluct/matPvalDESeq2.RData")
load("/home/david/gdrive/phd/data/ImpulsDE2/Manuscript_DataSets/simulations/RandomFluct/matPvalEdge.RData")
load("/home/david/gdrive/phd/data/ImpulsDE2/Manuscript_DataSets/simulations/RandomFluct/matboolDEGene.RData")
load("/home/david/gdrive/phd/data/ImpulsDE2/Manuscript_DataSets/simulations/RandomFluct/vecSDRand.RData")
load("/home/david/gdrive/phd/data/ImpulsDE2/Manuscript_DataSets/simulations/RandomFluct/temp/Simulation_matMuHidden.RData")
n <- colnames(matPvalImpulseDE2)[round( (dim(matPvalImpulseDE2)[2])/2 )]
dfECDFImpulseDE2 <- calcPvalECF( vecPval=matPvalImpulseDE2[,n])
dfECDFDESeq2 <- calcPvalECF( vecPval=matPvalDESeq2[,n] )
dfECDFEdge <- calcPvalECF( vecPval=matPvalEdge[,n] )
dfECF_Rand <- data.frame(
fpr=c(dfECDFImpulseDE2$ecf, dfECDFDESeq2$ecf, dfECDFEdge$ecf),
pthres=log(c(dfECDFImpulseDE2$p, dfECDFDESeq2$p, dfECDFEdge$p))/log(10),
Method=c(rep("ImpulseDE2", dim(dfECDFImpulseDE2)[1]),
rep("DESeq2", dim(dfECDFDESeq2)[1]),
rep("Edge", dim(dfECDFEdge)[1]) )
)
# Colour-blind palette
cbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
gplotECF_Rand <- ggplot(dfECF_Rand, aes(x=pthres, y=fpr, colour=Method)) +
geom_line(aes(colour=Method), show.legend=TRUE) + scale_colour_manual(values=cbPalette) +
xlab("log10 p-value threshold") +
ylab("False discovery rate") +
xlim(-3,0)
print(gplotECF_Rand)
### Put figure together
lsgplotsFigSimulationSupportingSI <- list(
gplotPvalCorr_BatchCorrCase,
gplotPvalCorr_BatchCorrCaseCtrl,
gplotECF_Rand
)
# Add margins
marginObject <- theme(plot.margin = unit(c(1,1,1,2), "cm")) #t,r,b,l
lsgplotsFigSimulationSupportingSI <- lapply(lsgplotsFigSimulationSupportingSI, "+", marginObject)
# Add text and legend formats
scaRefTextSize <- 14
scaResScale <- 2
scaLabelsScale <- 2
themeObjectStandard <- theme(axis.text=element_text(size=scaRefTextSize*scaResScale),
axis.title=element_text(size=scaRefTextSize*scaResScale,face="bold"),
legend.text=element_text(size=scaRefTextSize*scaResScale),
legend.title=element_text(size=scaRefTextSize*scaResScale),
legend.key.size = unit(scaResScale, 'lines'))
themeObjectNoLegend <- theme(axis.text=element_text(size=scaRefTextSize*scaResScale),
axis.title=element_text(size=scaRefTextSize*scaResScale,face="bold"),
legend.position="none")
lsthemeObjects <- list(themeObjectStandard,
themeObjectStandard,
themeObjectStandard)
lsgplotsFigSimulationSupportingSI <- lapply(seq(1, length(lsgplotsFigSimulationSupportingSI)), function(g){
lsgplotsFigSimulationSupportingSI[[g]] + lsthemeObjects[[g]]
})
graphics.off()
tiff("/home/david/gdrive/phd/data/ImpulsDE2/Manuscript_DataSets/figures/figSimulationSupportingSI.tiff",
width=480*2*2, height=480*2*2)
plot_grid(plotlist=lsgplotsFigSimulationSupportingSI,
align="h",
nrow=2, ncol=2,
rel_widths=c(1,1),
rel_heights=c(1,1),
labels="AUTO",
label_size=scaRefTextSize*scaResScale*scaLabelsScale)
dev.off()
graphics.off()
# b) Supporting PR plots
# AUC PR Number TP case
load("/home/david/gdrive/phd/data/ImpulsDE2/Manuscript_DataSets/simulations/ManyTP/matPvalImpulseDE2.RData")
load("/home/david/gdrive/phd/data/ImpulsDE2/Manuscript_DataSets/simulations/ManyTP/matPvalDESeq2.RData")
load("/home/david/gdrive/phd/data/ImpulsDE2/Manuscript_DataSets/simulations/ManyTP/matPvalEdge.RData")
load("/home/david/gdrive/phd/data/ImpulsDE2/Manuscript_DataSets/simulations/ManyTP/matboolDEGene.RData")
vecNTP <- sapply(colnames(matPvalImpulseDE2), function(tp){
as.numeric(unlist(strsplit(tp, split="n"))[2])
})
vecAUCPRImpulseDE2 <- array(NA, length(vecNTP))
names(vecAUCPRImpulseDE2) <- colnames(matPvalImpulseDE2)
vecAUCPRDESeq2 <- array(NA, length(vecNTP))
names(vecAUCPRDESeq2) <- colnames(matPvalImpulseDE2)
vecAUCPREdge <- array(NA, length(vecNTP))
names(vecAUCPREdge) <- colnames(matPvalImpulseDE2)
for(n in colnames(matPvalImpulseDE2)){
dfPRImpulseDE2 <- calcPR( vecPval=matPvalImpulseDE2[,n],
vecboolDE=matboolDEGene[,n] )
vecAUCPRImpulseDE2[n] <- calcAUCPR( dfPR=dfPRImpulseDE2 )
dfPRDESeq2 <- calcPR( vecPval=matPvalDESeq2[,n],
vecboolDE=matboolDEGene[,n] )
vecAUCPRDESeq2[n] <- calcAUCPR( dfPR=dfPRDESeq2 )
dfPREdge <- calcPR( vecPval=matPvalEdge[,n],
vecboolDE=matboolDEGene[,n] )
vecAUCPREdge[n] <- calcAUCPR( dfPR=dfPREdge )
}
dfAUCsPR_NTP <- data.frame( n=c(vecNTP, vecNTP, vecNTP),
auc=c(vecAUCPRImpulseDE2, vecAUCPRDESeq2, vecAUCPREdge),
Method=c(rep("ImpulseDE2", length(vecAUCPRImpulseDE2)),
rep("DESeq2", length(vecAUCPRDESeq2)),
rep("Edge", length(vecAUCPREdge)) ))
# Colour-blind palette
cbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
gplotAUCPR_NTP <- ggplot(dfAUCsPR_NTP) +
geom_line(aes(x=n, y=auc, colour=Method), alpha=0.7, size=2) + scale_colour_manual(values=cbPalette) +
geom_point(aes(x=n, y=auc), shape=3, size=2) +
xlab("Number of time points") +
ylab("AUC (PR)")
print(gplotAUCPR_NTP)
# AUC PR Number TP case-ctrl
load("/home/david/gdrive/phd/data/ImpulsDE2/Manuscript_DataSets/simulations/ManyTPCaseCtrl/matPvalImpulseDE2.RData")
load("/home/david/gdrive/phd/data/ImpulsDE2/Manuscript_DataSets/simulations/ManyTPCaseCtrl/matPvalDESeq2.RData")
load("/home/david/gdrive/phd/data/ImpulsDE2/Manuscript_DataSets/simulations/ManyTPCaseCtrl/matPvalEdge.RData")
load("/home/david/gdrive/phd/data/ImpulsDE2/Manuscript_DataSets/simulations/ManyTPCaseCtrl/matboolDEGene.RData")
vecNTP <- sapply(colnames(matPvalImpulseDE2), function(tp){
as.numeric(unlist(strsplit(tp, split="n"))[2])
})
vecAUCPRImpulseDE2 <- array(NA, length(vecNTP))
names(vecAUCPRImpulseDE2) <- colnames(matPvalImpulseDE2)
vecAUCPRDESeq2 <- array(NA, length(vecNTP))
names(vecAUCPRDESeq2) <- colnames(matPvalImpulseDE2)
vecAUCPREdge <- array(NA, length(vecNTP))
names(vecAUCPREdge) <- colnames(matPvalImpulseDE2)
for(n in colnames(matPvalImpulseDE2)){
dfPRImpulseDE2 <- calcPR( vecPval=matPvalImpulseDE2[,n],
vecboolDE=matboolDEGene[,n] )
vecAUCPRImpulseDE2[n] <- calcAUCPR( dfPR=dfPRImpulseDE2 )
dfPRDESeq2 <- calcPR( vecPval=matPvalDESeq2[,n],
vecboolDE=matboolDEGene[,n] )
vecAUCPRDESeq2[n] <- calcAUCPR( dfPR=dfPRDESeq2 )
dfPREdge <- calcPR( vecPval=matPvalEdge[,n],
vecboolDE=matboolDEGene[,n] )
vecAUCPREdge[n] <- calcAUCPR( dfPR=dfPREdge )
}
dfAUCsPR_NTPCaseCtrl <- data.frame( n=c(vecNTP, vecNTP, vecNTP),
auc=c(vecAUCPRImpulseDE2, vecAUCPRDESeq2, vecAUCPREdge),
Method=c(rep("ImpulseDE2", length(vecAUCPRImpulseDE2)),
rep("DESeq2", length(vecAUCPRDESeq2)),
rep("Edge", length(vecAUCPREdge)) ))
# Colour-blind palette
cbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
gplotAUCPR_NTPCaseCtrl <- ggplot(dfAUCsPR_NTPCaseCtrl) +
geom_line(aes(x=n, y=auc, colour=Method), alpha=0.7, size=2) + scale_colour_manual(values=cbPalette) +
geom_point(aes(x=n, y=auc), shape=3, size=2) +
xlab("Number of time points") +
ylab("AUC (PR)")
print(gplotAUCPR_NTPCaseCtrl)
# AUC PR NonSync
load("/home/david/gdrive/phd/data/ImpulsDE2/Manuscript_DataSets/simulations/NonSync/dfPvalSyncSampling.RData")
dfPRImpulseDE2Sync <- calcPR( vecPval=dfPvalSyncSampling$pvalSyncImpulseDE2,
vecboolDE=dfPvalSyncSampling$boolDESync )
scaAUCPRImpulseDE2Sync <- calcAUCPR( dfPR=dfPRImpulseDE2Sync )
dfPRImpulseDE2NonSync <- calcPR( vecPval=dfPvalSyncSampling$pvalNonSyncImpulseDE2,
vecboolDE=dfPvalSyncSampling$boolDENonSync )
scaAUCPRImpulseDE2NonSync <- calcAUCPR( dfPR=dfPRImpulseDE2NonSync )
dfPREdgeSync <- calcPR( vecPval=dfPvalSyncSampling$pvalSyncEdge,
vecboolDE=dfPvalSyncSampling$boolDESync )
scaAUCPREdgeSync <- calcAUCPR( dfPR=dfPREdgeSync )
dfPREdgeNonSync <- calcPR( vecPval=dfPvalSyncSampling$pvalNonSyncEdge,
vecboolDE=dfPvalSyncSampling$boolDENonSync )
scaAUCPREdgeNonSync <- calcAUCPR( dfPR=dfPREdgeNonSync )
dfPRs_NonSync <- data.frame(
precision=c(dfPRImpulseDE2Sync$precision,
dfPRImpulseDE2NonSync$precision,
dfPREdgeSync$precision,
dfPREdgeNonSync$precision),
recall=c(dfPRImpulseDE2Sync$recall,
dfPRImpulseDE2NonSync$recall,
dfPREdgeSync$recall,
dfPREdgeNonSync$recall),
Sampling=c(rep("ImpulseDE2 (Sync)", dim(dfPRImpulseDE2Sync)[1]),
rep("ImpulseDE2 (NonSync)", dim(dfPRImpulseDE2NonSync)[1]),
rep("Edge (Sync)", dim(dfPREdgeSync)[1]),
rep("Edge (NonSync)", dim(dfPREdgeNonSync)[1]) )
)
# Colour-blind palette
cbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
gplotPRs_NonSync <- ggplot(dfPRs_NonSync) +
geom_line(aes(x=recall, y=precision, colour=Sampling), size=2) + scale_colour_manual(values=cbPalette) +
xlab("Recall") +
ylab("Precision") +
scale_colour_discrete(name="Method (sampling)",
breaks=c("ImpulseDE2 (Sync)",
"ImpulseDE2 (NonSync)",
"Edge (Sync)",
"Edge (NonSync)" ),
labels=c(paste0("ImpulseDE2\n(Sync)\n[AUC=",round(scaAUCPRImpulseDE2Sync,3),"]"),
paste0("ImpulseDE2\n(NonSync)\n[AUC=",round(scaAUCPRImpulseDE2NonSync,3),"]"),
paste0("Edge\n(Sync)\n[AUC=",round(scaAUCPREdgeSync,3),"]"),
paste0("Edge\n(NonSync)\n[AUC=",round(scaAUCPREdgeNonSync,3),"]") ))
print(gplotPRs_NonSync)
# AUC PR BatchCorrCase
load("/home/david/gdrive/phd/data/ImpulsDE2/Manuscript_DataSets/simulations/BatchCorrCase/matPvalImpulseDE2.RData")
load("/home/david/gdrive/phd/data/ImpulsDE2/Manuscript_DataSets/simulations/BatchCorrCase/matPvalDESeq2.RData")
load("/home/david/gdrive/phd/data/ImpulsDE2/Manuscript_DataSets/simulations/BatchCorrCase/matboolDEGene.RData")
load("/home/david/gdrive/phd/data/ImpulsDE2/Manuscript_DataSets/simulations/BatchCorrCase/vecSDBatchEffectToSimulate.RData")
vecAUCPRImpulseDE2 <- array(NA, dim(matPvalImpulseDE2)[2])
names(vecAUCPRImpulseDE2) <- colnames(matPvalImpulseDE2)
vecAUCPRDESeq2 <- array(NA, dim(matPvalImpulseDE2)[2])
names(vecAUCPRDESeq2) <- colnames(matPvalImpulseDE2)
for(n in colnames(matPvalImpulseDE2)){
dfPRImpulseDE2 <- calcPR( vecPval=matPvalImpulseDE2[,n],
vecboolDE=matboolDEGene[,n] )
vecAUCPRImpulseDE2[n] <- calcAUCPR( dfPR=dfPRImpulseDE2 )
dfPRDESeq2 <- calcPR( vecPval=matPvalDESeq2[,n],
vecboolDE=matboolDEGene[,n] )
vecAUCPRDESeq2[n] <- calcAUCPR( dfPR=dfPRDESeq2 )
}
dfAUCsPR_BatchCorrCase <- data.frame( n=c(vecSDBatchEffectToSimulate, vecSDBatchEffectToSimulate),
auc=c(vecAUCPRImpulseDE2, vecAUCPRDESeq2),
Method=c(rep("ImpulseDE2", length(vecAUCPRImpulseDE2)),
rep("DESeq2", length(vecAUCPRDESeq2))) )
# Colour-blind palette
cbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
gplotAUCPR_BatchCorrCase <- ggplot(dfAUCsPR_BatchCorrCase) +
geom_line(aes(x=n, y=auc, colour=Method), size=2) + scale_colour_manual(values=cbPalette) +
geom_point(aes(x=n, y=auc), shape=3, size=2) +
ylim(0.4,0.9) +
xlab("standard deviation") +
ylab("AUC (PR)")
print(gplotAUCPR_BatchCorrCase)
# AUC PR BatchCorrCaseCtrl
load("/home/david/gdrive/phd/data/ImpulsDE2/Manuscript_DataSets/simulations/BatchCorrCaseCtrl/matPvalImpulseDE2.RData")
load("/home/david/gdrive/phd/data/ImpulsDE2/Manuscript_DataSets/simulations/BatchCorrCaseCtrl/matPvalDESeq2.RData")
load("/home/david/gdrive/phd/data/ImpulsDE2/Manuscript_DataSets/simulations/BatchCorrCaseCtrl/matboolDEGene.RData")
load("/home/david/gdrive/phd/data/ImpulsDE2/Manuscript_DataSets/simulations/BatchCorrCaseCtrl/vecSDBatchEffectToSimulate.RData")
vecAUCPRImpulseDE2 <- array(NA, dim(matPvalImpulseDE2)[2])
names(vecAUCPRImpulseDE2) <- colnames(matPvalImpulseDE2)
vecAUCPRDESeq2 <- array(NA, dim(matPvalImpulseDE2)[2])
names(vecAUCPRDESeq2) <- colnames(matPvalImpulseDE2)
for(n in colnames(matPvalImpulseDE2)){
dfPRImpulseDE2 <- calcPR( vecPval=matPvalImpulseDE2[,n],
vecboolDE=matboolDEGene[,n] )
vecAUCPRImpulseDE2[n] <- calcAUCPR( dfPR=dfPRImpulseDE2 )
dfPRDESeq2 <- calcPR( vecPval=matPvalDESeq2[,n],
vecboolDE=matboolDEGene[,n] )
vecAUCPRDESeq2[n] <- calcAUCPR( dfPR=dfPRDESeq2 )
}
dfAUCsPR_BatchCorrCaseCtrl <- data.frame( n=c(vecSDBatchEffectToSimulate, vecSDBatchEffectToSimulate),
auc=c(vecAUCPRImpulseDE2, vecAUCPRDESeq2),
Method=c(rep("ImpulseDE2", length(vecAUCPRImpulseDE2)),
rep("DESeq2", length(vecAUCPRDESeq2))) )
# Colour-blind palette
cbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
gplotAUCPR_BatchCorrCaseCtrl <- ggplot(dfAUCsPR_BatchCorrCaseCtrl) +
geom_line(aes(x=n, y=auc, colour=Method), size=2) + scale_colour_manual(values=cbPalette) +
geom_point(aes(x=n, y=auc), shape=3, size=2) +
ylim(0.4,0.9) +
xlab("standard deviation") +
ylab("AUC (PR)")
print(gplotAUCPR_BatchCorrCaseCtrl)
### Put figure together
lsgplotsFigSimulationPrecRecallSI <- list(
gplotAUCPR_NTP,
gplotAUCPR_NTPCaseCtrl,
gplotAUCPR_BatchCorrCase,
gplotAUCPR_BatchCorrCaseCtrl,
gplotPRs_NonSync
)
# Add margins
marginObject <- theme(plot.margin = unit(c(1,1,1,2), "cm")) #t,r,b,l
lsgplotsFigSimulationPrecRecallSI <- lapply(lsgplotsFigSimulationPrecRecallSI, "+", marginObject)
# Add text and legend formats
scaRefTextSize <- 14
scaResScale <- 2
scaLabelsScale <- 2
themeObjectStandard <- theme(axis.text=element_text(size=scaRefTextSize*scaResScale),
axis.title=element_text(size=scaRefTextSize*scaResScale,face="bold"),
legend.text=element_text(size=scaRefTextSize*scaResScale),
legend.title=element_text(size=scaRefTextSize*scaResScale),
legend.key.size = unit(scaResScale, 'lines'))
themeObjectNoLegend <- theme(axis.text=element_text(size=scaRefTextSize*scaResScale),
axis.title=element_text(size=scaRefTextSize*scaResScale,face="bold"),
legend.position="none")
themeObjectNonSync <- theme(axis.text=element_text(size=scaRefTextSize*scaResScale),
axis.title=element_text(size=scaRefTextSize*scaResScale,face="bold"),
legend.text=element_text(size=scaRefTextSize*scaResScale),
legend.title=element_text(size=scaRefTextSize*scaResScale),
legend.key.size = unit(4*scaResScale, 'lines'))
lsthemeObjects <- list(themeObjectNoLegend,
themeObjectStandard,
themeObjectNoLegend,
themeObjectStandard,
themeObjectNonSync)
lsgplotsFigSimulationPrecRecallSI <- lapply(seq(1, length(lsgplotsFigSimulationPrecRecallSI)), function(g){
lsgplotsFigSimulationPrecRecallSI[[g]] + lsthemeObjects[[g]]
})
graphics.off()
tiff("/home/david/gdrive/phd/data/ImpulsDE2/Manuscript_DataSets/figures/figSimulationPrecRecallSI.tiff",
width=480*2*2, height=480*2*2.5)
plot_grid(plotlist=lsgplotsFigSimulationPrecRecallSI,
align="h",
nrow=3, ncol=2,
rel_widths=c(1,1),
rel_heights=c(1,0.5,1),
labels="AUTO",
label_size=scaRefTextSize*scaResScale*scaLabelsScale)
dev.off()
graphics.off()
rm(list=ls())
load("/home/david/gdrive/phd/datasets/2016_PancreasAtlas/matCountsPancreasRed.RData")
source("~/gitDevelopment/LineagePulse/R/main_MixtureModel.R")
objectLP_pancreas <- runMixtureModel(matCounts=matCountsPancreasRed,
scaNMixtures=8,
vecFixedAssignments=NULL,
matPiConstPredictors=NULL,
vecNormConstExternal=NULL,
strDispModel="constant",
scaMaxEstimationCyclesEMlike=20,
scaMaxEstimationCyclesDropModel=20,
scaNProc=7,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
