boolSuperVerbose=TRUE )
source("~/gitDevelopment/LineagePulse/R/main_RSA.R")
vecNCentroidsPerPop <- c("FGF"=2)
objectLP <- runRSA(matCounts=matCountsAstro[vecidxTopExpressed,],
dfAnnotation=dfAnnotationAstro,
vecConfounders=c("batch"),
scaNMixtures=3,
vecNCentroidsPerPop=vecNCentroidsPerPop,
vecH0Pop=c("FGF"),
matPiConstPredictors=NULL,
vecNormConstExternal=vecDepthFac,
strDispModel="constant",
scaMaxEstimationCyclesEMlike=2,
scaMaxEstimationCyclesDropModel=2,
scaNProc=3,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
source("~/gitDevelopment/LineagePulse/R/main_RSA.R")
vecNCentroidsPerPop <- c("FGF"=2)
objectLP <- runRSA(matCounts=matCountsAstro[vecidxTopExpressed,],
dfAnnotation=dfAnnotationAstro,
vecConfounders=c("batch"),
scaNMixtures=3,
vecNCentroidsPerPop=vecNCentroidsPerPop,
vecH0Pop=c("FGF"),
matPiConstPredictors=NULL,
vecNormConstExternal=vecDepthFac,
strDispModel="constant",
scaMaxEstimationCyclesEMlike=2,
scaMaxEstimationCyclesDropModel=2,
scaNProc=3,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
source("~/gitDevelopment/LineagePulse/R/main_RSA.R")
vecNCentroidsPerPop <- c("FGF"=2)
objectLP <- runRSA(matCounts=matCountsAstro[vecidxTopExpressed,],
dfAnnotation=dfAnnotationAstro,
vecConfounders=c("batch"),
scaNMixtures=3,
vecNCentroidsPerPop=vecNCentroidsPerPop,
vecH0Pop=c("FGF"),
matPiConstPredictors=NULL,
vecNormConstExternal=vecDepthFac,
strDispModel="constant",
scaMaxEstimationCyclesEMlike=2,
scaMaxEstimationCyclesDropModel=2,
scaNProc=3,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
vecidxTopExpressed <- (sort(apply(matCountsAstro,1,sum), decreasing=TRUE, index.return=TRUE)$ix)[1:2]
source("~/gitDevelopment/LineagePulse/R/main_RSA.R")
vecNCentroidsPerPop <- c("FGF"=2)
objectLP <- runRSA(matCounts=matCountsAstro[vecidxTopExpressed,],
dfAnnotation=dfAnnotationAstro,
vecConfounders=c("batch"),
scaNMixtures=3,
vecNCentroidsPerPop=vecNCentroidsPerPop,
vecH0Pop=c("FGF"),
matPiConstPredictors=NULL,
vecNormConstExternal=vecDepthFac,
strDispModel="constant",
scaMaxEstimationCyclesEMlike=2,
scaMaxEstimationCyclesDropModel=2,
scaNProc=3,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
source("~/gitDevelopment/LineagePulse/R/main_RSA.R")
vecNCentroidsPerPop <- c("FGF"=2)
objectLP <- runRSA(matCounts=matCountsAstro[vecidxTopExpressed,],
dfAnnotation=dfAnnotationAstro,
vecConfounders=c("batch"),
scaNMixtures=3,
vecNCentroidsPerPop=vecNCentroidsPerPop,
vecH0Pop=c("FGF"),
matPiConstPredictors=NULL,
vecNormConstExternal=vecDepthFac,
strDispModel="constant",
scaMaxEstimationCyclesEMlike=2,
scaMaxEstimationCyclesDropModel=2,
scaNProc=3,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
vecidxTopExpressed <- (sort(apply(matCountsAstro,1,sum), decreasing=TRUE, index.return=TRUE)$ix)[1:2]
source("~/gitDevelopment/LineagePulse/R/main_RSA.R")
vecNCentroidsPerPop <- c("FGF"=2)
objectLP <- runRSA(matCounts=matCountsAstro[vecidxTopExpressed,],
dfAnnotation=dfAnnotationAstro,
vecConfounders=c("batch"),
scaNMixtures=3,
vecNCentroidsPerPop=vecNCentroidsPerPop,
vecH0Pop=c("FGF"),
matPiConstPredictors=NULL,
vecNormConstExternal=vecDepthFac,
strDispModel="constant",
scaMaxEstimationCyclesEMlike=2,
scaMaxEstimationCyclesDropModel=2,
scaNProc=1,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
source("~/gitDevelopment/LineagePulse/R/main_RSA.R")
vecNCentroidsPerPop <- c("FGF"=2)
objectLP <- runRSA(matCounts=matCountsAstro[vecidxTopExpressed,],
dfAnnotation=dfAnnotationAstro,
vecConfounders=c("batch"),
scaNMixtures=3,
vecNCentroidsPerPop=vecNCentroidsPerPop,
vecH0Pop=c("FGF"),
matPiConstPredictors=NULL,
vecNormConstExternal=vecDepthFac,
strDispModel="constant",
scaMaxEstimationCyclesEMlike=2,
scaMaxEstimationCyclesDropModel=2,
scaNProc=1,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
source("~/gitDevelopment/LineagePulse/R/main_RSA.R")
vecNCentroidsPerPop <- c("FGF"=2)
objectLP <- runRSA(matCounts=matCountsAstro[vecidxTopExpressed,],
dfAnnotation=dfAnnotationAstro,
vecConfounders=c("batch"),
scaNMixtures=3,
vecNCentroidsPerPop=vecNCentroidsPerPop,
vecH0Pop=c("FGF"),
matPiConstPredictors=NULL,
vecNormConstExternal=vecDepthFac,
strDispModel="constant",
scaMaxEstimationCyclesEMlike=2,
scaMaxEstimationCyclesDropModel=2,
scaNProc=1,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
dim(matCountsAstro)
source("~/gitDevelopment/LineagePulse/R/main_RSA.R")
vecNCentroidsPerPop <- c("FGF"=2)
objectLP <- runRSA(matCounts=matCountsAstro[vecidxTopExpressed,],
dfAnnotation=dfAnnotationAstro,
vecConfounders=c("batch"),
scaNMixtures=3,
vecNCentroidsPerPop=vecNCentroidsPerPop,
vecH0Pop=c("FGF"),
matPiConstPredictors=NULL,
vecNormConstExternal=vecDepthFac,
strDispModel="constant",
scaMaxEstimationCyclesEMlike=2,
scaMaxEstimationCyclesDropModel=2,
scaNProc=1,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
save(objectLP, file="~/phd/data/RSA/objectLP_4000genes_k3.RData")
source("~/gitDevelopment/LineagePulse/R/main_RSA.R")
vecNCentroidsPerPop <- c("FGF"=2)
objectLP <- runRSA(matCounts=matCountsAstro[vecidxTopExpressed,],
dfAnnotation=dfAnnotationAstro,
vecConfounders=c("batch"),
scaNMixtures=3,
vecNCentroidsPerPop=vecNCentroidsPerPop,
vecH0Pop=c("FGF"),
matPiConstPredictors=NULL,
vecNormConstExternal=vecDepthFac,
strDispModel="constant",
scaMaxEstimationCyclesEMlike=2,
scaMaxEstimationCyclesDropModel=2,
scaNProc=1,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
source("~/gitDevelopment/LineagePulse/R/main_RSA.R")
vecNCentroidsPerPop <- c("FGF"=2)
objectLP <- runRSA(matCounts=matCountsAstro[vecidxTopExpressed,],
dfAnnotation=dfAnnotationAstro,
vecConfounders=c("batch"),
scaNMixtures=3,
vecNCentroidsPerPop=vecNCentroidsPerPop,
vecH0Pop=c("FGF"),
matPiConstPredictors=NULL,
vecNormConstExternal=vecDepthFac,
strDispModel="constant",
scaMaxEstimationCyclesEMlike=2,
scaMaxEstimationCyclesDropModel=2,
scaNProc=1,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
source("~/gitDevelopment/LineagePulse/R/main_RSA.R")
vecNCentroidsPerPop <- c("FGF"=2)
objectLP <- runRSA(matCounts=matCountsAstro[vecidxTopExpressed,],
dfAnnotation=dfAnnotationAstro,
vecConfounders=c("batch"),
scaNMixtures=3,
vecNCentroidsPerPop=vecNCentroidsPerPop,
vecH0Pop=c("FGF"),
matPiConstPredictors=NULL,
vecNormConstExternal=vecDepthFac,
strDispModel="constant",
scaMaxEstimationCyclesEMlike=2,
scaMaxEstimationCyclesDropModel=2,
scaNProc=1,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
source("~/gitDevelopment/LineagePulse/R/main_RSA.R")
vecNCentroidsPerPop <- c("FGF"=2)
objectLP <- runRSA(matCounts=matCountsAstro[vecidxTopExpressed,],
dfAnnotation=dfAnnotationAstro,
vecConfounders=c("batch"),
scaNMixtures=3,
vecNCentroidsPerPop=vecNCentroidsPerPop,
vecH0Pop=c("FGF"),
matPiConstPredictors=NULL,
vecNormConstExternal=vecDepthFac,
strDispModel="constant",
scaMaxEstimationCyclesEMlike=2,
scaMaxEstimationCyclesDropModel=2,
scaNProc=1,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
source("~/gitDevelopment/LineagePulse/R/main_RSA.R")
vecNCentroidsPerPop <- c("FGF"=2)
objectLP <- runRSA(matCounts=matCountsAstro[vecidxTopExpressed,],
dfAnnotation=dfAnnotationAstro,
vecConfounders=c("batch"),
scaNMixtures=3,
vecNCentroidsPerPop=vecNCentroidsPerPop,
vecH0Pop=c("FGF"),
matPiConstPredictors=NULL,
vecNormConstExternal=vecDepthFac,
strDispModel="constant",
scaMaxEstimationCyclesEMlike=2,
scaMaxEstimationCyclesDropModel=2,
scaNProc=1,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
source("~/gitDevelopment/LineagePulse/R/main_RSA.R")
vecNCentroidsPerPop <- c("FGF"=2)
objectLP <- runRSA(matCounts=matCountsAstro[vecidxTopExpressed,],
dfAnnotation=dfAnnotationAstro,
vecConfounders=c("batch"),
scaNMixtures=3,
vecNCentroidsPerPop=vecNCentroidsPerPop,
vecH0Pop=c("FGF"),
matPiConstPredictors=NULL,
vecNormConstExternal=vecDepthFac,
strDispModel="constant",
scaMaxEstimationCyclesEMlike=2,
scaMaxEstimationCyclesDropModel=2,
scaNProc=1,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
source("~/gitDevelopment/LineagePulse/R/main_RSA.R")
vecNCentroidsPerPop <- c("FGF"=2)
objectLP <- runRSA(matCounts=matCountsAstro[vecidxTopExpressed,],
dfAnnotation=dfAnnotationAstro,
vecConfounders=c("batch"),
scaNMixtures=3,
vecNCentroidsPerPop=vecNCentroidsPerPop,
vecH0Pop=c("FGF"),
matPiConstPredictors=NULL,
vecNormConstExternal=vecDepthFac,
strDispModel="constant",
scaMaxEstimationCyclesEMlike=2,
scaMaxEstimationCyclesDropModel=2,
scaNProc=1,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
matAstroLPNormData <- getNormData(matCounts = objectLP@matCountsProc,
lsMuModel = objectLP@lsMuModelH1)
source("~/gitDevelopment/LineagePulse/R/main_RSA.R")
vecNCentroidsPerPop <- c("FGF"=2)
objectLP <- runRSA(matCounts=matCountsAstro[vecidxTopExpressed,],
dfAnnotation=dfAnnotationAstro,
vecConfounders=c("batch"),
scaNMixtures=3,
vecNCentroidsPerPop=vecNCentroidsPerPop,
vecH0Pop=c("FGF"),
matPiConstPredictors=NULL,
vecNormConstExternal=vecDepthFac,
strDispModel="constant",
scaMaxEstimationCyclesEMlike=2,
scaMaxEstimationCyclesDropModel=2,
scaNProc=1,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
source("~/gitDevelopment/LineagePulse/R/main_RSA.R")
vecNCentroidsPerPop <- c("FGF"=2)
objectLP <- runRSA(matCounts=matCountsAstro[vecidxTopExpressed,],
dfAnnotation=dfAnnotationAstro,
vecConfounders=c("batch"),
scaNMixtures=3,
vecNCentroidsPerPop=vecNCentroidsPerPop,
vecH0Pop=c("FGF"),
matPiConstPredictors=NULL,
vecNormConstExternal=vecDepthFac,
strDispModel="constant",
scaMaxEstimationCyclesEMlike=2,
scaMaxEstimationCyclesDropModel=2,
scaNProc=1,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
vecidxTopExpressed <- (sort(apply(matCountsAstro,1,sum), decreasing=TRUE, index.return=TRUE)$ix)[1:100]
source("~/gitDevelopment/LineagePulse/R/main_RSA.R")
vecNCentroidsPerPop <- c("FGF"=2)
objectLP <- runRSA(matCounts=matCountsAstro[vecidxTopExpressed,],
dfAnnotation=dfAnnotationAstro,
vecConfounders=c("batch"),
scaNMixtures=3,
vecNCentroidsPerPop=vecNCentroidsPerPop,
vecH0Pop=c("FGF"),
matPiConstPredictors=NULL,
vecNormConstExternal=vecDepthFac,
strDispModel="constant",
scaMaxEstimationCyclesEMlike=2,
scaMaxEstimationCyclesDropModel=2,
scaNProc=3,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
vecidxTopExpressed <- (sort(apply(matCountsAstro,1,sum), decreasing=TRUE, index.return=TRUE)$ix)[1:100]
source("~/gitDevelopment/LineagePulse/R/main_RSA.R")
vecNCentroidsPerPop <- c("FGF"=2)
objectLP <- runRSA(matCounts=matCountsAstro[vecidxTopExpressed,],
dfAnnotation=dfAnnotationAstro,
vecConfounders=c("batch"),
scaNMixtures=3,
vecNCentroidsPerPop=vecNCentroidsPerPop,
vecH0Pop=c("FGF"),
matPiConstPredictors=NULL,
vecNormConstExternal=vecDepthFac,
strDispModel="constant",
scaMaxEstimationCyclesEMlike=2,
scaMaxEstimationCyclesDropModel=2,
scaNProc=3,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
objectLP$dfResults
matAstroLPNormData <- getNormData(matCounts = objectLP@matCountsProc,
lsMuModel = objectLP@lsMuModelH1)
dfgplotMixtureWeights <- data.frame(
weight=do.call(c, lapply(seq(1,dim(objectLP@matWeights)[2]), function(m) objectLP@matWeights[,m] )),
mixture=do.call(c, lapply(seq(1,dim(objectLP@matWeights)[2]), function(m) rep(paste0("mixture",m), dim(objectLP@matWeights)[1]) ))
)
gplotWeights <- ggplot() + geom_freqpoly(
data=dfgplotMixtureWeights, aes(x=weight, colour=mixture)) +
labs(title = "Mixture weight frequencies")
gplotWeights
dfgplotQval <- data.frame(qval=log(objectLP$dfResults$adj.p)/log(10))
gplotQval <- ggplot() +
geom_histogram(data=dfgplotQval, aes(x=qval)) +
xlab("log10 q-value") +
labs(title = "Q-value density")
gplotQval
vecQvalIdxToPlot <- c(1,2,3,4,20,50,100)
vecGeneIdxToPlot <- order(objectLP$dfResults$adj.p)[vecQvalIdxToPlot]
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
idxRef1 <- vecGeneIdxToPlot[2]
vecidxGeneToPlot <- vecGeneIdxToPlot[!vecGeneIdxToPlot %in% idxRef1]
for(i in vecidxGeneToPlot){
dfgplotGeneGeneScatter <- data.frame(
cond=c(as.vector(objectLP@dfAnnotationProc$condition)),
batch=c(as.vector(objectLP@dfAnnotationProc$batch)),
WeightMixture1=objectLP@matWeights[,1],
genex=log(c(matAstroLPNormData[idxRef1,])+1),
geney=log(c(matAstroLPNormData[i,])+1)
)
dfgplotCentroids <- data.frame(
#cond=c("Centroid_FGF", "Centroid_EGF-FGF"),
#batch=c("Centroid", "Centroid"),
cond=c("Centroid_FGF1", "Centroid_FGF2", "Centroid_EGF-FGF"),
batch=c("Centroid", "Centroid", "Centroid"),
genex=log(c(objectLP@lsMuModelH1$matMuModel[idxRef1,])+1),
geney=log(c(objectLP@lsMuModelH1$matMuModel[i,])+1)
)
lsgplotsGeneGeneScatter[[match(i, vecGeneIdxToPlot)]] <- ggplot() +
geom_point(data=dfgplotGeneGeneScatter,
aes(x=genex, y=geney, colour=cond, shape=batch), alpha=0.8) +
geom_point(data=dfgplotCentroids,
aes(x=genex, y=geney, colour=cond, shape=batch),
alpha=1, size=3 ) +
scale_colour_manual(values=cbbPalette) +
xlab(paste0("log10 expression of gene with q=", round(log(objectLP$dfResults$adj.p[idxRef1])/log(10),2) )) +
ylab(paste0("log10 expression of gene with q=", round(log(objectLP$dfResults$adj.p[i])/log(10),2) ))
}
lsgplotsGeneGeneScatter[[1]]
lsgplotsGeneGeneScatter <- list()
vecQvalIdxToPlot <- c(1,2,3,4,20,50, 500,1000,3000,3500,4000)
vecQvalIdxToPlot <- c(1,2,3,4,20,50,100)
vecGeneIdxToPlot <- order(objectLP$dfResults$adj.p)[vecQvalIdxToPlot]
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
idxRef1 <- vecGeneIdxToPlot[2]
vecidxGeneToPlot <- vecGeneIdxToPlot[!vecGeneIdxToPlot %in% idxRef1]
for(i in vecidxGeneToPlot){
dfgplotGeneGeneScatter <- data.frame(
cond=c(as.vector(objectLP@dfAnnotationProc$condition)),
batch=c(as.vector(objectLP@dfAnnotationProc$batch)),
WeightMixture1=objectLP@matWeights[,1],
genex=log(c(matAstroLPNormData[idxRef1,])+1),
geney=log(c(matAstroLPNormData[i,])+1)
)
dfgplotCentroids <- data.frame(
#cond=c("Centroid_FGF", "Centroid_EGF-FGF"),
#batch=c("Centroid", "Centroid"),
cond=c("Centroid_FGF1", "Centroid_FGF2", "Centroid_EGF-FGF"),
batch=c("Centroid", "Centroid", "Centroid"),
genex=log(c(objectLP@lsMuModelH1$matMuModel[idxRef1,])+1),
geney=log(c(objectLP@lsMuModelH1$matMuModel[i,])+1)
)
lsgplotsGeneGeneScatter[[match(i, vecGeneIdxToPlot)]] <- ggplot() +
geom_point(data=dfgplotGeneGeneScatter,
aes(x=genex, y=geney, colour=cond, shape=batch), alpha=0.8) +
geom_point(data=dfgplotCentroids,
aes(x=genex, y=geney, colour=cond, shape=batch),
alpha=1, size=3 ) +
scale_colour_manual(values=cbbPalette) +
xlab(paste0("log10 expression of gene with q=", round(log(objectLP$dfResults$adj.p[idxRef1])/log(10),2) )) +
ylab(paste0("log10 expression of gene with q=", round(log(objectLP$dfResults$adj.p[i])/log(10),2) ))
}
lsgplotsGeneGeneScatter[[1]]
lsgplotsGeneGeneScatter[[length(lsgplotsGeneGeneScatter)]]
pdf("~/phd/data/RSA/fitPlots/GeneGeneScatter.pdf")
for(g in lsgplotsGeneGeneScatter) print(g)
dev.off()
graphics.off()
vecidxTopExpressed <- (sort(apply(matCountsAstro,1,sum), decreasing=TRUE, index.return=TRUE)$ix)[1:1000]
source("~/gitDevelopment/LineagePulse/R/main_RSA.R")
vecNCentroidsPerPop <- c("FGF"=2)
objectLP <- runRSA(matCounts=matCountsAstro[vecidxTopExpressed,],
dfAnnotation=dfAnnotationAstro,
vecConfounders=c("batch"),
scaNMixtures=3,
vecNCentroidsPerPop=vecNCentroidsPerPop,
vecH0Pop=c("FGF"),
matPiConstPredictors=NULL,
vecNormConstExternal=vecDepthFac,
strDispModel="constant",
scaMaxEstimationCyclesEMlike=10,
scaMaxEstimationCyclesDropModel=5,
scaNProc=3,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
vecidxTopExpressed <- (sort(apply(matCountsAstro,1,sum), decreasing=TRUE, index.return=TRUE)$ix)[1:1000]
source("~/gitDevelopment/LineagePulse/R/main_RSA.R")
vecNCentroidsPerPop <- c("FGF"=2)
objectLP <- runRSA(matCounts=matCountsAstro[vecidxTopExpressed,],
dfAnnotation=dfAnnotationAstro,
vecConfounders=c("batch"),
scaNMixtures=3,
vecNCentroidsPerPop=vecNCentroidsPerPop,
vecH0Pop=c("FGF"),
matPiConstPredictors=NULL,
vecNormConstExternal=vecDepthFac,
strDispModel="constant",
scaMaxEstimationCyclesEMlike=10,
scaMaxEstimationCyclesDropModel=5,
scaNProc=3,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
save(objectLP, file="~/phd/data/RSA/objectLP_1000genes_k3.RData")
matAstroLPNormData <- getNormData(matCounts = objectLP@matCountsProc,
lsMuModel = objectLP@lsMuModelH1)
dfgplotMixtureWeights <- data.frame(
weight=do.call(c, lapply(seq(1,dim(objectLP@matWeights)[2]), function(m) objectLP@matWeights[,m] )),
mixture=do.call(c, lapply(seq(1,dim(objectLP@matWeights)[2]), function(m) rep(paste0("mixture",m), dim(objectLP@matWeights)[1]) ))
)
gplotWeights <- ggplot() + geom_freqpoly(
data=dfgplotMixtureWeights, aes(x=weight, colour=mixture)) +
labs(title = "Mixture weight frequencies")
gplotWeights
dfgplotQval <- data.frame(qval=log(objectLP$dfResults$adj.p)/log(10))
gplotQval <- ggplot() +
geom_histogram(data=dfgplotQval, aes(x=qval)) +
xlab("log10 q-value") +
labs(title = "Q-value density")
gplotQval
pdf("~/phd/data/RSA/fitPlots/RSAoutput_summary.pdf")
print(gplotWeights)
print(gplotQval)
dev.off()
graphics.off()
lsgplotsGeneGeneScatter <- list()
vecQvalIdxToPlot <- c(1,2,3,4,20,50, 500,1000,3000,3500,4000)
vecQvalIdxToPlot <- c(1,2,3,4,20,50,100, 500, 1000)
vecGeneIdxToPlot <- order(objectLP$dfResults$adj.p)[vecQvalIdxToPlot]
cbbPalette <- c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
idxRef1 <- vecGeneIdxToPlot[2]
vecidxGeneToPlot <- vecGeneIdxToPlot[!vecGeneIdxToPlot %in% idxRef1]
for(i in vecidxGeneToPlot){
dfgplotGeneGeneScatter <- data.frame(
cond=c(as.vector(objectLP@dfAnnotationProc$condition)),
batch=c(as.vector(objectLP@dfAnnotationProc$batch)),
WeightMixture1=objectLP@matWeights[,1],
genex=log(c(matAstroLPNormData[idxRef1,])+1),
geney=log(c(matAstroLPNormData[i,])+1)
)
dfgplotCentroids <- data.frame(
#cond=c("Centroid_FGF", "Centroid_EGF-FGF"),
#batch=c("Centroid", "Centroid"),
cond=c("Centroid_FGF1", "Centroid_FGF2", "Centroid_EGF-FGF"),
batch=c("Centroid", "Centroid", "Centroid"),
genex=log(c(objectLP@lsMuModelH1$matMuModel[idxRef1,])+1),
geney=log(c(objectLP@lsMuModelH1$matMuModel[i,])+1)
)
lsgplotsGeneGeneScatter[[match(i, vecGeneIdxToPlot)]] <- ggplot() +
geom_point(data=dfgplotGeneGeneScatter,
aes(x=genex, y=geney, colour=cond, shape=batch), alpha=0.8) +
geom_point(data=dfgplotCentroids,
aes(x=genex, y=geney, colour=cond, shape=batch),
alpha=1, size=3 ) +
scale_colour_manual(values=cbbPalette) +
xlab(paste0("log10 expression of gene with q=", round(log(objectLP$dfResults$adj.p[idxRef1])/log(10),2) )) +
ylab(paste0("log10 expression of gene with q=", round(log(objectLP$dfResults$adj.p[i])/log(10),2) ))
}
lsgplotsGeneGeneScatter[[1]]
lsgplotsGeneGeneScatter[[length(lsgplotsGeneGeneScatter)]]
pdf("~/phd/data/RSA/fitPlots/GeneGeneScatter.pdf")
for(g in lsgplotsGeneGeneScatter) print(g)
dev.off()
graphics.off()
