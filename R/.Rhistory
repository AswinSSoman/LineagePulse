dirOutSimulation=NULL)
vecPT <- lsSim$vecPT
matSampledCountsObserved <- lsSim$matSampledCountsObserved
dfAnnotationSim <- data.frame(
cell=colnames(lsSim$matSampledCountsObserved),
pseudotime=lsSim$vecPT,
stringsAsFactors=FALSE
)
source("~/gitDevelopment/LineagePulse/R/main_RSA.R")
objectLPSim <- runLineagePulse(matCounts=lsSim$matSampledCountsObserved,
dfAnnotation=dfAnnotationSim,
vecConfounders=NULL,
strMuModel="impulse",
strDispModel="constant",
strDropModel="logistic_ofMu",
strDropFitGroup="ForAllCells",
matPiConstPredictors=NULL,
vecNormConstExternal=NULL,
boolEstimateNoiseBasedOnH0=FALSE,
scaMaxEstimationCycles=10,
scaNProc=1,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
objectLPSim <- runLineagePulse(matCounts=lsSim$matSampledCountsObserved,
dfAnnotation=dfAnnotationSim,
vecConfounders=NULL,
strMuModel="impulse",
strDispModel="constant",
strDropModel="logistic_ofMu",
strDropFitGroup="ForAllCells",
matPiConstPredictors=NULL,
vecNormConstExternal=NULL,
boolEstimateNoiseBasedOnH0=TRUE,
scaMaxEstimationCycles=10,
scaNProc=1,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
objectLPSim <- runLineagePulse(matCounts=lsSim$matSampledCountsObserved,
dfAnnotation=dfAnnotationSim,
vecConfounders=NULL,
strMuModel="impulse",
strDispModel="constant",
strDropModel="logistic_ofMu",
strDropFitGroup="PerCell",
matPiConstPredictors=NULL,
vecNormConstExternal=NULL,
boolEstimateNoiseBasedOnH0=TRUE,
scaMaxEstimationCycles=10,
scaNProc=1,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
objectLPSim <- runLineagePulse(matCounts=lsSim$matSampledCountsObserved,
dfAnnotation=dfAnnotationSim,
vecConfounders=NULL,
strMuModel="impulse",
strDispModel="constant",
strDropModel="logistic",
strDropFitGroup="PerCell",
matPiConstPredictors=NULL,
vecNormConstExternal=NULL,
boolEstimateNoiseBasedOnH0=TRUE,
scaMaxEstimationCycles=10,
scaNProc=1,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
objectLPSim <- runLineagePulse(matCounts=lsSim$matSampledCountsObserved,
dfAnnotation=dfAnnotationSim,
vecConfounders=NULL,
strMuModel="impulse",
strDispModel="constant",
strDropModel="logistic",
strDropFitGroup="ForAllCells",
matPiConstPredictors=NULL,
vecNormConstExternal=NULL,
boolEstimateNoiseBasedOnH0=TRUE,
scaMaxEstimationCycles=10,
scaNProc=1,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
source("~/gitDevelopment/LineagePulse/R/main_RSA.R")
objectLPSim <- runLineagePulse(matCounts=lsSim$matSampledCountsObserved,
dfAnnotation=dfAnnotationSim,
vecConfounders=NULL,
strMuModel="impulse",
strDispModel="constant",
strDropModel="logistic",
strDropFitGroup="ForAllCells",
matPiConstPredictors=NULL,
vecNormConstExternal=NULL,
boolEstimateNoiseBasedOnH0=FALSE,
scaMaxEstimationCycles=10,
scaNProc=1,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
source("~/gitDevelopment/LineagePulse/R/main_RSA.R")
lsSim <- simulateDataSet(scaNCells=40,
scaNConst=40,
scaNImp=40,
scaPTmax=100,
scaMumax=1000,
scaSDImpulseAmplitude=1,
vecNormConstExternal=NULL,
matDropoutModelExternal=NULL,
dirOutSimulation=NULL)
vecPT <- lsSim$vecPT
matSampledCountsObserved <- lsSim$matSampledCountsObserved
dfAnnotationSim <- data.frame(
cell=colnames(lsSim$matSampledCountsObserved),
pseudotime=lsSim$vecPT,
stringsAsFactors=FALSE
)
source("~/gitDevelopment/LineagePulse/R/main_RSA.R")
objectLPSim <- runLineagePulse(matCounts=lsSim$matSampledCountsObserved,
dfAnnotation=dfAnnotationSim,
vecConfounders=NULL,
strMuModel="impulse",
strDispModel="constant",
strDropModel="logistic",
strDropFitGroup="ForAllCells",
matPiConstPredictors=NULL,
vecNormConstExternal=NULL,
boolEstimateNoiseBasedOnH0=FALSE,
scaMaxEstimationCycles=10,
scaNProc=1,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
objectLPSim <- runLineagePulse(matCounts=lsSim$matSampledCountsObserved,
dfAnnotation=dfAnnotationSim,
vecConfounders=NULL,
strMuModel="impulse",
strDispModel="constant",
strDropModel="logistic",
strDropFitGroup="PerCell",
matPiConstPredictors=NULL,
vecNormConstExternal=NULL,
boolEstimateNoiseBasedOnH0=FALSE,
scaMaxEstimationCycles=10,
scaNProc=1,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
objectLPSim <- runLineagePulse(matCounts=lsSim$matSampledCountsObserved,
dfAnnotation=dfAnnotationSim,
vecConfounders=NULL,
strMuModel="impulse",
strDispModel="constant",
strDropModel="logistic_ofMu",
strDropFitGroup="PerCell",
matPiConstPredictors=NULL,
vecNormConstExternal=NULL,
boolEstimateNoiseBasedOnH0=FALSE,
scaMaxEstimationCycles=10,
scaNProc=1,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
source("~/gitDevelopment/LineagePulse/R/main_RSA.R")
objectLPSim <- runLineagePulse(matCounts=lsSim$matSampledCountsObserved,
dfAnnotation=dfAnnotationSim,
vecConfounders=NULL,
strMuModel="impulse",
strDispModel="constant",
strDropModel="logistic_ofMu",
strDropFitGroup="PerCell",
matPiConstPredictors=NULL,
vecNormConstExternal=NULL,
boolEstimateNoiseBasedOnH0=FALSE,
scaMaxEstimationCycles=10,
scaNProc=1,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
source("~/gitDevelopment/LineagePulse/R/main_RSA.R")
objectLPSim <- runLineagePulse(matCounts=lsSim$matSampledCountsObserved,
dfAnnotation=dfAnnotationSim,
vecConfounders=NULL,
strMuModel="impulse",
strDispModel="constant",
strDropModel="logistic_ofMu",
strDropFitGroup="PerCell",
matPiConstPredictors=NULL,
vecNormConstExternal=NULL,
boolEstimateNoiseBasedOnH0=FALSE,
scaMaxEstimationCycles=10,
scaNProc=1,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
source("~/gitDevelopment/LineagePulse/R/main_RSA.R")
objectLPSim <- runLineagePulse(matCounts=lsSim$matSampledCountsObserved,
dfAnnotation=dfAnnotationSim,
vecConfounders=NULL,
strMuModel="impulse",
strDispModel="constant",
strDropModel="logistic_ofMu",
strDropFitGroup="PerCell",
matPiConstPredictors=NULL,
vecNormConstExternal=NULL,
boolEstimateNoiseBasedOnH0=FALSE,
scaMaxEstimationCycles=10,
scaNProc=1,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
source("~/gitDevelopment/LineagePulse/R/main_RSA.R")
objectLPSim <- runLineagePulse(matCounts=lsSim$matSampledCountsObserved,
dfAnnotation=dfAnnotationSim,
vecConfounders=NULL,
strMuModel="impulse",
strDispModel="constant",
strDropModel="logistic_ofMu",
strDropFitGroup="PerCell",
matPiConstPredictors=NULL,
vecNormConstExternal=NULL,
boolEstimateNoiseBasedOnH0=TRUE,
scaMaxEstimationCycles=10,
scaNProc=1,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
objectLPSim <- runLineagePulse(matCounts=lsSim$matSampledCountsObserved,
dfAnnotation=dfAnnotationSim,
vecConfounders=NULL,
strMuModel="impulse",
strDispModel="constant",
strDropModel="logistic",
strDropFitGroup="PerCell",
matPiConstPredictors=NULL,
vecNormConstExternal=NULL,
boolEstimateNoiseBasedOnH0=TRUE,
scaMaxEstimationCycles=10,
scaNProc=1,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
source("~/gitDevelopment/LineagePulse/R/main_RSA.R")
objectLPSim <- runLineagePulse(matCounts=lsSim$matSampledCountsObserved,
dfAnnotation=dfAnnotationSim,
vecConfounders=NULL,
strMuModel="impulse",
strDispModel="constant",
strDropModel="logistic",
strDropFitGroup="PerCell",
matPiConstPredictors=NULL,
vecNormConstExternal=NULL,
boolEstimateNoiseBasedOnH0=TRUE,
scaMaxEstimationCycles=10,
scaNProc=1,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
source("~/gitDevelopment/LineagePulse/R/main_RSA.R")
objectLPSim <- runLineagePulse(matCounts=lsSim$matSampledCountsObserved,
dfAnnotation=dfAnnotationSim,
vecConfounders=NULL,
strMuModel="impulse",
strDispModel="constant",
strDropModel="logistic",
strDropFitGroup="ForAllCells",
matPiConstPredictors=NULL,
vecNormConstExternal=NULL,
boolEstimateNoiseBasedOnH0=TRUE,
scaMaxEstimationCycles=10,
scaNProc=1,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
objectLPSim <- runLineagePulse(matCounts=lsSim$matSampledCountsObserved,
dfAnnotation=dfAnnotationSim,
vecConfounders=NULL,
strMuModel="impulse",
strDispModel="constant",
strDropModel="logistic",
strDropFitGroup="ForAllCells",
matPiConstPredictors=NULL,
vecNormConstExternal=NULL,
boolEstimateNoiseBasedOnH0=FALSE,
scaMaxEstimationCycles=10,
scaNProc=1,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
objectLPSim@lsDropModel$matDropoutLinModel
objectLPSim@matCountsProc
objectLPSim <- runLineagePulse(matCounts=lsSim$matSampledCountsObserved,
dfAnnotation=dfAnnotationSim,
vecConfounders=NULL,
strMuModel="impulse",
strDispModel="constant",
strDropModel="logistic_ofMu",
strDropFitGroup="ForAllCells",
matPiConstPredictors=NULL,
vecNormConstExternal=NULL,
boolEstimateNoiseBasedOnH0=FALSE,
scaMaxEstimationCycles=10,
scaNProc=1,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
objectLPSim <- runLineagePulse(matCounts=lsSim$matSampledCountsObserved,
dfAnnotation=dfAnnotationSim,
vecConfounders=NULL,
strMuModel="cluster",
strDispModel="constant",
strDropModel="logistic_ofMu",
strDropFitGroup="PerCell",
matPiConstPredictors=NULL,
vecNormConstExternal=NULL,
boolEstimateNoiseBasedOnH0=FALSE,
scaMaxEstimationCycles=10,
scaNProc=1,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
objectLPSim <- runLineagePulse(matCounts=lsSim$matSampledCountsObserved,
dfAnnotation=dfAnnotationSim,
vecConfounders=NULL,
strMuModel="clusters",
strDispModel="constant",
strDropModel="logistic_ofMu",
strDropFitGroup="PerCell",
matPiConstPredictors=NULL,
vecNormConstExternal=NULL,
boolEstimateNoiseBasedOnH0=FALSE,
scaMaxEstimationCycles=10,
scaNProc=1,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
rm(list=ls())
library(ggplot2)
load("~/phd/datasets/2016_Buettner_Astrocytes/Astrocytes.RDATA")
matCountsAstro <- counts.rep.all
dfAnnotationAstro <- data.frame(
cell=colnames(matCountsAstro),
condition=x,
batch=sapply(as.vector(x.b), function(id) paste(unlist(strsplit(id," ")),collapse="_") ),
stringsAsFactors=FALSE
)
dfAnnotationAstro$populations <- NA
dfAnnotationAstro[dfAnnotationAstro$condition=="FGF",]$populations <- "FGF"
rownames(dfAnnotationAstro) <- dfAnnotationAstro$cell
vecDepth <- apply(matCountsAstro,2,sum)
hist(vecDepth)
boolDepthOutlier <- vecDepth > 1*10^7
sum(boolDepthOutlier)
matCountsAstro <- matCountsAstro[,!boolDepthOutlier]
dfAnnotationAstro <- dfAnnotationAstro[!boolDepthOutlier,]
matPCA_scanpy <- read.csv("~/phd/data/RSA/scanpy_buettner17_pca.csv", row.names = 1)
vecboolPCAOutlier <- matPCA_scanpy[,2]>5*10^4 | matPCA_scanpy[,1]>2*10^5
print(sum(vecboolPCAOutlier))
matCountsAstro <- matCountsAstro[,!vecboolPCAOutlier]
dfAnnotationAstro <- dfAnnotationAstro[!vecboolPCAOutlier,]
dfgplotPcaAstroOut <- data.frame(
pc1=matPCA_scanpy[!vecboolPCAOutlier,1],
pc2=matPCA_scanpy[!vecboolPCAOutlier,2],
pc3=matPCA_scanpy[!vecboolPCAOutlier,3],
pc4=matPCA_scanpy[!vecboolPCAOutlier,4],
cond=as.vector(dfAnnotationAstro$condition[!vecboolPCAOutlier]),
batch=as.factor(dfAnnotationAstro$batch[!vecboolPCAOutlier])
)
ggplot() + geom_point(data=dfgplotPcaAstroOut, aes(x=pc1, y=pc2, colour=cond, shape=batch))
dfgplotDepthAstro <- data.frame(
depth=apply(matCountsAstro,2,sum),
cond=dfAnnotationAstro$condition,
batch=dfAnnotationAstro$batch,
condbatch=paste0(dfAnnotationAstro$condition, "-",
dfAnnotationAstro$batch)
)
vecDepth <- apply(matCountsAstro, 2, sum)
vecDepthFac <- vecDepth/mean(vecDepth)
vecidxTopExpressed <- (sort(apply(matCountsAstro,1,sum), decreasing=TRUE, index.return=TRUE)$ix)[1:1000]
source("~/gitDevelopment/LineagePulse/R/main_RSA.R")
vecNCentroidsPerPop <- c("FGF"=2)
objectLP <- runRSA(matCounts=matCountsAstro[vecidxTopExpressed,],
dfAnnotation=dfAnnotationAstro,
vecConfounders=c("batch"),
scaNMixtures=3,
vecNCentroidsPerPop=vecNCentroidsPerPop,
vecH0Pop=c("FGF"),
matPiConstPredictors=NULL,
vecNormConstExternal=vecDepthFac,
strDispModel="constant",
scaMaxEstimationCyclesEMlike=10,
scaMaxEstimationCyclesDropModel=5,
scaNProc=3,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
vecidxTopExpressed <- (sort(apply(matCountsAstro,1,sum), decreasing=TRUE, index.return=TRUE)$ix)[1:20]
source("~/gitDevelopment/LineagePulse/R/main_RSA.R")
vecNCentroidsPerPop <- c("FGF"=2)
objectLP <- runRSA(matCounts=matCountsAstro[vecidxTopExpressed,],
dfAnnotation=dfAnnotationAstro,
vecConfounders=c("batch"),
scaNMixtures=3,
vecNCentroidsPerPop=vecNCentroidsPerPop,
vecH0Pop=c("FGF"),
matPiConstPredictors=NULL,
vecNormConstExternal=vecDepthFac,
strDispModel="constant",
scaMaxEstimationCyclesEMlike=10,
scaMaxEstimationCyclesDropModel=2,
scaNProc=3,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
source("~/gitDevelopment/LineagePulse/R/main_RSA.R")
vecNCentroidsPerPop <- c("FGF"=2)
objectLP <- runRSA(matCounts=matCountsAstro[vecidxTopExpressed,],
dfAnnotation=dfAnnotationAstro,
vecConfounders=c("batch"),
scaNMixtures=3,
vecNCentroidsPerPop=vecNCentroidsPerPop,
vecH0Pop=c("FGF"),
vecNormConstExternal=vecDepthFac,
matPiConstPredictors=NULL,
strDropModel="logistic_ofMu",
strDropFitGroup="PerCell",
scaMaxEstimationCyclesEMlike=10,
scaMaxEstimationCyclesDropModel=2,
scaNProc=3,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
objectLP <- runRSA(matCounts=matCountsAstro[vecidxTopExpressed,],
dfAnnotation=dfAnnotationAstro,
vecConfounders=c("batch"),
scaNMixtures=3,
vecNCentroidsPerPop=vecNCentroidsPerPop,
vecH0Pop=c("FGF"),
vecNormConstExternal=vecDepthFac,
matPiConstPredictors=NULL,
strDropModel="logistic_ofMu",
strDropFitGroup="ForAllCells",
scaMaxEstimationCyclesEMlike=10,
scaMaxEstimationCyclesDropModel=2,
scaNProc=3,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
source("~/gitDevelopment/LineagePulse/R/main_RSA.R")
vecNCentroidsPerPop <- c("FGF"=2)
objectLP <- runRSA(matCounts=matCountsAstro[vecidxTopExpressed,],
dfAnnotation=dfAnnotationAstro,
vecConfounders=c("batch"),
scaNMixtures=3,
vecNCentroidsPerPop=vecNCentroidsPerPop,
vecH0Pop=c("FGF"),
vecNormConstExternal=vecDepthFac,
matPiConstPredictors=NULL,
strDropModel="logistic",
strDropFitGroup="PerCell",
scaMaxEstimationCyclesEMlike=10,
scaMaxEstimationCyclesDropModel=2,
scaNProc=3,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
objectLPSim$dfResults
objectLPSim
rm(list=ls())
source("~/gitDevelopment/LineagePulse/R/main_RSA.R")
lsSim <- simulateDataSet(scaNCells=40,
scaNConst=40,
scaNImp=40,
scaPTmax=100,
scaMumax=1000,
scaSDImpulseAmplitude=1,
vecNormConstExternal=NULL,
matDropoutModelExternal=NULL,
dirOutSimulation=NULL)
vecPT <- lsSim$vecPT
matSampledCountsObserved <- lsSim$matSampledCountsObserved
dfAnnotationSim <- data.frame(
cell=colnames(lsSim$matSampledCountsObserved),
pseudotime=lsSim$vecPT,
stringsAsFactors=FALSE
)
source("~/gitDevelopment/LineagePulse/R/main_RSA.R")
objectLPSim <- runLineagePulse(matCounts=lsSim$matSampledCountsObserved,
dfAnnotation=dfAnnotationSim,
vecConfounders=NULL,
strMuModel="clusters",
strDispModel="constant",
strDropModel="logistic_ofMu",
strDropFitGroup="PerCell",
matPiConstPredictors=NULL,
vecNormConstExternal=NULL,
boolEstimateNoiseBasedOnH0=FALSE,
scaMaxEstimationCycles=10,
scaNProc=1,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
rm(list=ls())
source("~/gitDevelopment/LineagePulse/R/main_RSA.R")
lsSim <- simulateDataSet(scaNCells=40,
scaNConst=40,
scaNImp=40,
scaPTmax=100,
scaMumax=1000,
scaSDImpulseAmplitude=1,
vecNormConstExternal=NULL,
matDropoutModelExternal=NULL,
dirOutSimulation=NULL)
vecPT <- lsSim$vecPT
matSampledCountsObserved <- lsSim$matSampledCountsObserved
dfAnnotationSim <- data.frame(
cell=colnames(lsSim$matSampledCountsObserved),
pseudotime=lsSim$vecPT,
stringsAsFactors=FALSE
)
source("~/gitDevelopment/LineagePulse/R/main_RSA.R")
objectLPSim <- runLineagePulse(matCounts=lsSim$matSampledCountsObserved,
dfAnnotation=dfAnnotationSim,
vecConfounders=NULL,
strMuModel="impulse",
strDispModel="constant",
strDropModel="logistic_ofMu",
strDropFitGroup="PerCell",
matPiConstPredictors=NULL,
vecNormConstExternal=NULL,
boolEstimateNoiseBasedOnH0=TRUE,
scaMaxEstimationCycles=10,
scaNProc=1,
boolVerbose=TRUE,
boolSuperVerbose=TRUE )
objectLPSim$dfResults
plotGene(objectLPSim,rownames(objectLPSim@dfResults[which.max(objectLPSim@dfResults$adj.p),]),boolLogPlot=FALSE)
plotGene(objectLPSim,rownames(objectLPSim@dfResults[which.min(objectLPSim@dfResults$adj.p),]),boolLogPlot=FALSE)
